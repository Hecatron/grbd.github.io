<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Grbd Blog</title><link href="http://grbd.github.io/" rel="alternate"></link><link href="http://grbd.github.io/feeds/all.atom.xml" rel="self"></link><id>http://grbd.github.io/</id><updated>2017-01-25T23:40:00+00:00</updated><entry><title>XUnit Unit Tests and Logging - XProj</title><link href="http://grbd.github.io/posts/2017/01/25/xunit-unit-tests-and-logging-xproj/" rel="alternate"></link><published>2017-01-25T23:40:00+00:00</published><updated>2017-01-25T23:40:00+00:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2017-01-25:/posts/2017/01/25/xunit-unit-tests-and-logging-xproj/</id><summary type="html">&lt;p&gt;XUnit Unit Tests and Logging - XProj&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Continuing from the last blog entry, I have put here some steps on getting XUnit / .Net Core xproj project and Liblog / Serilog working for a Unit test project.&lt;/p&gt;
&lt;p&gt;Typically, these are used with .Net Core, although the next release of Visual Studio 2017 / tooling for Studio 2015 may make some of this obsolete as there are plans to move .Net Core to .csproj based projects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xunit.github.io/"&gt;http://xunit.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've put some examples in the below link on github&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/grbd/GBD.Blog.Examples/tree/master/Source/XUnit"&gt;https://github.com/grbd/GBD.Blog.Examples/tree/master/Source/XUnit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setup of Project&lt;/h2&gt;
&lt;p&gt;Within Visual Studio, Create a new C# Class Library (.Net Core) Project within a Solution&lt;/p&gt;
&lt;h3&gt;project.json&lt;/h3&gt;
&lt;p&gt;We can make most of the changes we need by directly altering the project.json file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;testRunner&lt;/em&gt; entry tells .net core that we're using XUnit to run the tests&lt;/li&gt;
&lt;li&gt;The define sections for liblog are required for .Net Core compatibility&lt;/li&gt;
&lt;li&gt;The framework section specifies that we want to use the .Net Core framework for testing (not the net461 framework)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the dependencies&lt;/p&gt;
&lt;p&gt;For Testing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NETStandard.Library&lt;/strong&gt; - Standard Application Library for Core&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;xunit&lt;/strong&gt; - Testing framework&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dotnet-test-xunit&lt;/strong&gt; - This is the .Net Core equivilent of a runner for the project to run the tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Logging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Serilog&lt;/strong&gt; - Logging Framework&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serilog.Sinks.Observable&lt;/strong&gt; - Needed to wire Serilog into XUnit's output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serilog.Sinks.Literate&lt;/strong&gt; - Coloured Console Output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serilog.Sinks.ColoredConsole&lt;/strong&gt; - Coloured Console Output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System.Reactive&lt;/strong&gt; - Needed by the observable class's within Serilog&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0.0-*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;testRunner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xunit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;quot;buildOptions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;define&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIBLOG_PORTABLE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIBLOG_PUBLIC&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;NETStandard.Library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.6.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;dotnet-test-xunit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.2.0-preview2-build1029&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;xunit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.2.0-beta5-build3474&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Serilog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.3.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Serilog.Sinks.Literate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Serilog.Sinks.Observable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Serilog.Sinks.ColoredConsole&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;System.Reactive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3.1.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;System.Reflection.TypeExtensions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4.3.0&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;quot;frameworks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;netcoreapp1.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Microsoft.NETCore.App&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;platform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.1.0&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Liblog&lt;/h3&gt;
&lt;p&gt;There isn't much point in creating a LoggingHelper class with .Net core since the XUnit output to visual studio isn't currently working yet. But we do need to manually add in LibLog since the NuGet package won't do this for us with project.json based projects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/xunit/xunit/issues/608"&gt;https://github.com/xunit/xunit/issues/608&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latest version of the liblog source can be located here&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/damianh/LibLog/blob/v4.2.6/src/LibLog/LibLog.cs"&gt;https://github.com/damianh/LibLog/blob/v4.2.6/src/LibLog/LibLog.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Copy this file into a location within the project, typically Nuget installs it into&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;App_Packages/LibLog.4.2/LibLog.cs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Test Base Class&lt;/h3&gt;
&lt;p&gt;Next, let's create a Base class for our tests to save having to write code when setting up logging. 
Remember to change the namespace and using statements to match up with the name of the class library namespace.&lt;/p&gt;
&lt;p&gt;Note this is different from the csproj setup; this is due to a bug with Visual Studio tooling with respect to the Test Explorer. 
To get around this the below just logs to the console instead, but to see the log text output you have to run "dotnet test" at the command line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Base/BaseTest.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Serilog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Test2.Logging&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit.Abstractions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Test2.Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Used as a Base class for testing. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseTest&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ILog&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//protected readonly ITestOutputHelper output;&lt;/span&gt;
        &lt;span class="c1"&gt;//protected readonly IDisposable _logCapture;&lt;/span&gt;
        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;SerilogSetup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Constructor. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;outputHelper&amp;quot;&amp;gt; The output helper from XUnit. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BaseTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestOutputHelper&lt;/span&gt; &lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Get a hold of the XUnit output&lt;/span&gt;
            &lt;span class="c1"&gt;//  output = outputHelper;&lt;/span&gt;
            &lt;span class="c1"&gt;// Connects Serilog to the XUnit Output&lt;/span&gt;
            &lt;span class="c1"&gt;//  _logCapture = LoggingHelper.Capture(outputHelper);&lt;/span&gt;


            &lt;span class="c1"&gt;// Currently there&amp;#39;s problem with preivew2 tooling for Visual Studio 2015 and .Net Core&lt;/span&gt;
            &lt;span class="c1"&gt;// when it comes to capturing output for Tests in the Visual Studio Test Explorer&lt;/span&gt;
            &lt;span class="c1"&gt;// The only way around this currently is to output text to the Console&lt;/span&gt;
            &lt;span class="c1"&gt;// and see it via &amp;quot;dotnet test&amp;quot; at the command line&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SerilogSetup&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Add [{SourceContext}] to the output so we know which class it is&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;outtemplate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] [{SourceContext}] {Message}{NewLine}{Exception}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LoggerConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MinimumLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verbose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteTo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LiterateConsole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputTemplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;outtemplate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;SerilogSetup&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Store a reference for LibLog&lt;/span&gt;
            &lt;span class="c1"&gt;// Because this is a base class avoid GetCurrentClassLogger and use GetType().ToString()&lt;/span&gt;
            &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LogProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Cleanup the LoggingHelper. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//_logCapture.Dispose();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Test Example&lt;/h3&gt;
&lt;p&gt;Next lets create an example test to show off how to create a test and log some output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Test1.Base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Test1.Logging&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit.Abstractions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Test1.Tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Example of a test Class. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestClass1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BaseTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Constructor. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;outputHelper&amp;quot;&amp;gt; The output helper used by XUnit. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TestClass1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestOutputHelper&lt;/span&gt; &lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// We Capture the Output injected by XUnit for Outputting to Visual Studio&lt;/span&gt;
            &lt;span class="c1"&gt;// and pass it to the Base Class to setup the Logger property for use with LibLog&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Example Test. &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Fact]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TestLog1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Example of throwing out some log entries for Visual Studio to pick up on in the output&lt;/span&gt;

            &lt;span class="c1"&gt;// This uses LibLog which is independent of the Logging framework&lt;/span&gt;
            &lt;span class="c1"&gt;// Typically this would be used in the library we&amp;#39;re testing but we can also use it here as well&lt;/span&gt;
            &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;LibLog Warning Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// Example of checking to see if something is true for a given test&lt;/span&gt;
            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running Tests&lt;/h2&gt;
&lt;p&gt;To run the tests, just run within Visual Studio&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test -&amp;gt; Windows -&amp;gt; Test Explorer &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'll probably need to build the test project at least once before the tests will show up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Sometimes after adding all the code to the Visual Studio project, you need to close then re-open Visual Studio.
This seems to be down to the fact that the tooling within Visual Studio for .Net Core projects isn&amp;#39;t quite perfect yet
&lt;/pre&gt;&lt;/div&gt;</content><category term="code"></category><category term="dotnet"></category><category term="liblog"></category><category term="xunit"></category><category term="serilog"></category></entry><entry><title>XUnit Unit Tests and Logging - CSProj</title><link href="http://grbd.github.io/posts/2017/01/25/xunit-unit-tests-and-logging-csproj/" rel="alternate"></link><published>2017-01-25T23:30:00+00:00</published><updated>2017-01-25T23:30:00+00:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2017-01-25:/posts/2017/01/25/xunit-unit-tests-and-logging-csproj/</id><summary type="html">&lt;p&gt;XUnit Unit Tests and Logging - CSProj&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Sometimes for libraries, it's important to be able to test the different parts to see if we get the output we expect. &lt;br&gt;
This might involve running a select on a database via a database library, or just checking that the type of an object returned isn't null. &lt;br&gt;
Unit tests can come in handy when a very important library has had changes made to it and you want to make sure the output is predictable.&lt;/p&gt;
&lt;p&gt;The way this works&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You create a class library to house the tests &lt;br&gt;
    By convention, it's usually named the same as the library being tested but with the word .Tests added to the end of it&lt;/li&gt;
&lt;li&gt;You add a reference to the library / thing you want to actually test&lt;/li&gt;
&lt;li&gt;You add a reference to a test framework / such as XUnit to run the tests&lt;/li&gt;
&lt;li&gt;Within the test library, you can create a bunch of functions grouped by class to do the tests you want to do&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's several different testing frameworks, Microsoft even has their own one built into the framework. &lt;br&gt;
NUnit was a favourite of mine, but this seems to have been replaced by XUnit as one of the more popular ones&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xunit.github.io/"&gt;http://xunit.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've put some examples in the below link on github&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/grbd/GBD.Blog.Examples/tree/master/Source/XUnit"&gt;https://github.com/grbd/GBD.Blog.Examples/tree/master/Source/XUnit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ITestOutputHelper&lt;/h2&gt;
&lt;p&gt;One of the ways in which xunit can output logging information for a given test is the use of ITestOutputHelper. 
Within the constructor of a class within the test library, we specify a parameter of ITestOutputHelper.&lt;/p&gt;
&lt;p&gt;XUnit will notice this and use some magic called Dependency injection, this will automatically fill in the class needed for Logging output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit.Abstractions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Test1.Log&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestLog1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ITestOutputHelper&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TestLog1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestOutputHelper&lt;/span&gt; &lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;        [Fact]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SomeTest1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ITestOutputHelper is the main pipeline for outputting text to the Visual Studio Test Explorer window (in the Output pane) for XUnit. 
One problem I have spotted with .Net Core xproj libraries setup for testing is that this currently does not seem to work. This is actually a problem with the current Visual Studio tooling for .Net Core instead of XUnit&lt;/p&gt;
&lt;h2&gt;Setup of Project&lt;/h2&gt;
&lt;p&gt;With tests there is no actual single point of entry, this is because the XUnit runner actually handles the running of the tests.
All we need to do is create a bunch of functions with the right attributes and the XUnit runner will auto run all of these functions in parallel in a multi-threaded way (for increased speed).&lt;/p&gt;
&lt;p&gt;CSProj is the traditional style of projects normally used with Visual Studio for targeting the original .Net framework. &lt;br&gt;
The first step, is to just create a new C# or VB.Net class library project within a solution&lt;/p&gt;
&lt;h3&gt;Add References&lt;/h3&gt;
&lt;p&gt;Next, we add some references to the project&lt;/p&gt;
&lt;p&gt;For testing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xunit&lt;/strong&gt; - Testing framework&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;xunit.runner.visualstudio&lt;/strong&gt; - This allows the tests to be picked up by Visual Studio Test Explorer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Logging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LibLog&lt;/strong&gt; - Logging abstraction&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serilog&lt;/strong&gt; - Logging Framework&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serilog.Sinks.Observable&lt;/strong&gt; - Needed to wire Serilog into XUnit's output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System.Reactive&lt;/strong&gt; - Needed by the observable class's within Serilog&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project Properties&lt;/h3&gt;
&lt;p&gt;Next, we are going to make a slight change to the project properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right Click on the Project and select &lt;strong&gt;Properties&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Build&lt;/strong&gt; Tab on the left hand side&lt;/li&gt;
&lt;li&gt;Under Conditional Compilation, symbols add &lt;strong&gt;LIBLOG_PUBLIC&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Logging Helper&lt;/h3&gt;
&lt;p&gt;Now we are going to create a class to act as a bridge from Serilog to ITestOutputHelper.
We could if we wanted to also output to other sinks / destinations such as a text file or database table.&lt;/p&gt;
&lt;p&gt;Originally sourced from &lt;a href="https://github.com/damianh/CapturingLogOutputWithXunit2AndParallelTests"&gt;https://github.com/damianh/CapturingLogOutputWithXunit2AndParallelTests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Base/LoggingHelper.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Reactive.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Reactive.Subjects&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Serilog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Serilog.Context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Serilog.Events&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Serilog.Formatting.Display&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit.Abstractions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Test1.Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoggingHelper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LogEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s_logEventSubject&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LogEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;CaptureCorrelationIdKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CaptureCorrelationId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;MessageTemplateTextFormatter&lt;/span&gt; &lt;span class="n"&gt;s_formatter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageTemplateTextFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message}{NewLine}{Exception}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;LoggingHelper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LoggerConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteTo&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Observers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observable&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logEvent&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s_logEventSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logEvent&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enrich&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromLogContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt; &lt;span class="nf"&gt;Capture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestOutputHelper&lt;/span&gt; &lt;span class="n"&gt;testOutputHelper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;captureId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewGuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LogEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logEvent&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;logEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContainsKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CaptureCorrelationIdKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class="n"&gt;logEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CaptureCorrelationIdKey&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;captureId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s_logEventSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logEvent&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringWriter&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;s_formatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;testOutputHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pushProperty&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LogContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PushProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CaptureCorrelationIdKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;captureId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DisposableAction&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;pushProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DisposableAction&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Action&lt;/span&gt; &lt;span class="n"&gt;_action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DisposableAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_action&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_action&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Test Base Class&lt;/h3&gt;
&lt;p&gt;Next, let's create a base class for our tests&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Base/BaseTest.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Test1.Logging&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit.Abstractions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Test1.Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Used as a Base class for testing. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseTest&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ILog&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ITestOutputHelper&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt; &lt;span class="n"&gt;_logCapture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Constructor. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;outputHelper&amp;quot;&amp;gt; The output helper from XUnit. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BaseTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestOutputHelper&lt;/span&gt; &lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Get a hold of the XUnit output&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// Connects Serilog to the XUnit Output&lt;/span&gt;
            &lt;span class="n"&gt;_logCapture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoggingHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Capture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// Store a reference for LibLog&lt;/span&gt;
            &lt;span class="c1"&gt;// Because this is a base class avoid GetCurrentClassLogger and use GetType().ToString()&lt;/span&gt;
            &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LogProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Cleanup the LoggingHelper. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_logCapture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Test Example&lt;/h3&gt;
&lt;p&gt;Using the Base class, we can now create an example test&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LibLog is first used to pass in what we want to log&lt;/li&gt;
&lt;li&gt;This then gets piped to Serilog&lt;/li&gt;
&lt;li&gt;Serilog then pipes this caross to the XUnit output ITestOutputHelper&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Test1.Base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Test1.Logging&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit.Abstractions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Test1.Tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Example of a test Class. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestClass1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BaseTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Constructor. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;outputHelper&amp;quot;&amp;gt; The output helper used by XUnit. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TestClass1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestOutputHelper&lt;/span&gt; &lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputHelper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// We Capture the Output injected by XUnit for Outputting to Visual Studio&lt;/span&gt;
            &lt;span class="c1"&gt;// and pass it to the Base Class to setup the Logger property for use with LibLog&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Example Test. &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Fact]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TestLog1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Example of throwing out some log entries for Visual Studio to pick up on in the output&lt;/span&gt;

            &lt;span class="c1"&gt;// This uses LibLog which is independent of the Logging framework&lt;/span&gt;
            &lt;span class="c1"&gt;// Typically this would be used in the library we&amp;#39;re testing but we can also use it here as well&lt;/span&gt;
            &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;LibLog Warning Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// Example of checking to see if something is true for a given test&lt;/span&gt;
            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This might come across as a bit convoluted but at the same time&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A library does not need to care about anything associated with different logging frameworks by using Liblog&lt;/li&gt;
&lt;li&gt;Serilog can be used to pipe the results to multiple outputs&lt;/li&gt;
&lt;li&gt;ITestOutputHelper is just used to pipe the result to the Visual Studio Test output result window.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Writing Tests&lt;/h2&gt;
&lt;h3&gt;Fact Testing&lt;/h3&gt;
&lt;p&gt;The first way of testing is to stick the &lt;strong&gt;Fact&lt;/strong&gt; attribute at the top of the test function. &lt;br&gt;
This is used where we don't need to test against a range of parameters typically.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Assert&lt;/strong&gt; Functions are a way of checking and registering if a test should pass or fail based on if the result of something is False or True&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyFirstUnitTests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;        [Fact]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PassingTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;        [Fact]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;FailingTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Theory Testing&lt;/h3&gt;
&lt;p&gt;The second way of testing is the use of the &lt;strong&gt;Theory&lt;/strong&gt; attribute at the top of the test function. 
This can be used with &lt;strong&gt;InlineData&lt;/strong&gt; to run the test function multiple times with different data inputted.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Assert&lt;/strong&gt; Functions are a way of checking and registering if a test should pass or fail based on if the result of something is False or True&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyFirstUnitTests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="na"&gt;        [Theory]&lt;/span&gt;
&lt;span class="na"&gt;        [InlineData(3)]&lt;/span&gt;
&lt;span class="na"&gt;        [InlineData(5)]&lt;/span&gt;
&lt;span class="na"&gt;        [InlineData(6)]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;MyFirstTheory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;IsOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running Tests&lt;/h2&gt;
&lt;p&gt;To run the tests, just run within Visual Studio&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test -&amp;gt; Windows -&amp;gt; Test Explorer &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'll probably need to build the test project at least once before the tests will show up.&lt;/p&gt;</content><category term="code"></category><category term="dotnet"></category><category term="liblog"></category><category term="xunit"></category><category term="serilog"></category></entry><entry><title>Logging with LibLog and SeriLog</title><link href="http://grbd.github.io/posts/2017/01/25/logging-with-liblog-and-serilog/" rel="alternate"></link><published>2017-01-25T23:00:00+00:00</published><updated>2017-01-25T23:00:00+00:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2017-01-25:/posts/2017/01/25/logging-with-liblog-and-serilog/</id><summary type="html">&lt;p&gt;Logging with LibLog and SeriLog&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;For a while now I have been looking into the best way to implement logging within C# Projects.
A while back, I used to be a big fan of NLog, but more recently, I've moved to using LibLog and Serilog&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serilog.net/"&gt;https://serilog.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/damianh/LibLog/wiki"&gt;https://github.com/damianh/LibLog/wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've put some examples in the below link on github&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/grbd/GBD.Blog.Examples/tree/master/Source/LibLog"&gt;https://github.com/grbd/GBD.Blog.Examples/tree/master/Source/LibLog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;LibLog&lt;/h2&gt;
&lt;p&gt;When it comes to libraries, you do not always know who is going to be using the library, if it's part of a large team or open to the world.
So ideally, you want to avoid a dependency on a specific Logging library in case someone wants to use a different Logging implementation
Alternatively, if it needs to change later to a different logging framework.&lt;/p&gt;
&lt;p&gt;One of the first abstractions in use was Common.Logging, however it lacks support for outputting structured data such as Serilog.
Next is liblog, with liblog you actually embed a blob of code into the library.
This code then picks up which logging abstraction is in use by the application and writes to it via some clever reflection code.
Below are some links that also explore using liblog with Serilog&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tonytalks.technology/logging-with-serilog-liblog-and-seq-a68f9fca7301#.e40211sux"&gt;https://tonytalks.technology/logging-with-serilog-liblog-and-seq-a68f9fca7301#.e40211sux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lunarfrog.com/blog/net-open-source-netstandard-logging-using-liblog"&gt;http://lunarfrog.com/blog/net-open-source-netstandard-logging-using-liblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From what I can gather, the reason for including the liblog code directly into the library instead of as an external reference is to avoid dependencies on different versions of liblog between different libraries that might be part of a larger project.&lt;/p&gt;
&lt;h3&gt;Setup .Net&lt;/h3&gt;
&lt;p&gt;With traditional .csproj projects, we can use a NuGet package to incorporate the code into the project
This uses a feature of NuGet called ContentFiles to copy the code.
This method seems to be the simplest way to set things up, also it allows for the code to be auto namespaced and be upgradable via NuGet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/LibLog/"&gt;https://www.nuget.org/packages/LibLog/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Setup .Net Core&lt;/h3&gt;
&lt;p&gt;For .xproj type projects, the setup is a little more involved.
Currently there is no support for NuGet ContentFiles with .xproj / project.json based projects at the moment so we need to copy in the code manually.
Once Visual Studio 2017 comes out and everything moves back to .csproj type projects this might change.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/damianh/LibLog/issues/35"&gt;https://github.com/damianh/LibLog/issues/35&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, we need to add a definition to out project.json file to allow LibLog to work with this type of framework&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;buildOptions&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;define&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIBLOG_PORTABLE&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we need to copy in the liblog source code manually into the project. &lt;br&gt;
The latest version of the liblog source can be located here&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/damianh/LibLog/blob/v4.2.6/src/LibLog/LibLog.cs"&gt;https://github.com/damianh/LibLog/blob/v4.2.6/src/LibLog/LibLog.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Copy this file into a location within the project; typically, Nuget installs it into &lt;br&gt;
&lt;strong&gt;App_Packages/LibLog.4.2/LibLog.cs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next, we need to make some modifications to the namespace within the Liblog.cs file. &lt;br&gt;
Replace &lt;strong&gt;YourRootNamespace&lt;/strong&gt; with the namespace of the library / application.&lt;/p&gt;
&lt;p&gt;At the top of the file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// If you copied this file manually, you need to change all &amp;quot;YourRootNameSpace&amp;quot; so not to clash with other libraries&lt;/span&gt;
&lt;span class="c1"&gt;// that use LibLog&lt;/span&gt;
&lt;span class="cp"&gt;#if LIBLOG_PROVIDERS_ONLY&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;YourRootNamespace.LibLog&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;YourRootNamespace.Logging&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Diagnostics.CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#if LIBLOG_PROVIDERS_ONLY&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;YourRootNamespace.LibLog.LogProviders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;YourRootNamespace.Logging.LogProviders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mid way down the file as well&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#if LIBLOG_PROVIDERS_ONLY&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;YourRootNamespace.LibLog.LogProviders&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;YourRootNamespace.Logging.LogProviders&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;For an example of how to call LibLog within code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ILog&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LogProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetCurrentClassLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DoSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Basic Logging&lt;/span&gt;
            &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Method &amp;#39;DoSomething&amp;#39; in progress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// To take advantage of Serilog&amp;#39;s Structured data logging&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Latitude&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Longitude&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;134&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;elapsedMs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InfoFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Liblog {MethodName} Entry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InfoFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Liblog: {@Position} .. {Elapsed:000}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elapsedMs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One thing to be aware of when using LibLog is that when calling&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ILog&lt;/span&gt; &lt;span class="n"&gt;LibLogger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LogProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetCurrentClassLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is important that the Serilog Configuration is setup before this is called.
Therefore, if the above property is located within the main Program class and Serilog has not yet been setup then no logging can be done via the LibLogger property.&lt;/p&gt;
&lt;h2&gt;Serilog&lt;/h2&gt;
&lt;p&gt;When it comes to outputting the logs to the outside world, we need some sort of logging framework to handle this.
Liblog is setup in such a way that the library it is a part of does not need to care which logging system the end user is using.
So the general gist of it is, is that you reference Serilog (or another logging framework) within the Application or website that is actually using the library.
This way Serilog handles the actual output to the outside world.&lt;/p&gt;
&lt;h3&gt;Structured Data&lt;/h3&gt;
&lt;p&gt;There is a few different logging environments available.
Serilog is a new contender in that it has the advantage of logging fields instead of just a string; they tend to refer to this as Structured Data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Latitude&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Longitude&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;134&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;elapsedMs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Processed {@Position} in {Elapsed:000} ms.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elapsedMs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At a later stage, we can capture the fields such as Elapsed or Position and insert them into a database table as one example.
This can come in handy as it avoids the need to manipulate strings when extracting information from a single log entry.&lt;/p&gt;
&lt;h3&gt;Sinks&lt;/h3&gt;
&lt;p&gt;Serilog has the concept of sinks; a Sink is a destination for the logged output. One example might be a coloured console output, another a database table or a syslog server.&lt;/p&gt;
&lt;p&gt;For console output the two main ones are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Serilog.Sinks.Literate&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serilog.Sinks.ColoredConsole&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(My preference tends to be the literate one)&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;This is an example of logging directly via Serilog, although any log entries generated by liblog should also pick up on the Serilog logger that's been setup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Serilog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;TestApp1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LoggerConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MinimumLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verbose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteTo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LiterateConsole&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verbose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test Verbose Message...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test Info Message...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test Debug Message...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test Warning Message...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test Error Message...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test Fatal Message...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadKey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Capturing Logs&lt;/h2&gt;
&lt;p&gt;I haven't really explored this one yet but one way to capture log entries in a nice GUI is the use of GetSeq&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://getseq.net/"&gt;https://getseq.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="code"></category><category term="dotnet"></category><category term="liblog"></category><category term="serilog"></category></entry><entry><title>Using the Mbed CLI</title><link href="http://grbd.github.io/posts/2016/11/06/using-the-mbed-cli/" rel="alternate"></link><published>2016-11-06T18:00:00+00:00</published><updated>2016-11-06T18:00:00+00:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2016-11-06:/posts/2016/11/06/using-the-mbed-cli/</id><summary type="html">&lt;p&gt;Building mbed projects&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;I've recently been looking into the use of mbed for building embedded related projects.
It turns out they've made building code against they're library very easy with a small tool called the mbed-cli.
Mbed-cli is a python script that can be used to handle compiling / library dependency resolution / settings etc. for building projects.&lt;/p&gt;
&lt;p&gt;I'm hoping that I might be able to get this working with Visual Micro at some stage so that I can single step / debug a board using GDB and a J-Link Segger or OpenOCD.
For now, I've attempted to summarise most of the important bits when setting up and using the mbed-cli tool.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To get everything needed installed, we need to install the following.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install the latest python 2.x version and make sure python is in your path - &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install the latest git and make sure git is in your path - &lt;a href="https://git-scm.com/download/win"&gt;https://git-scm.com/download/win&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install the latest mercurial and make sure the hg command is in your path - &lt;a href="https://www.mercurial-scm.org/downloads"&gt;https://www.mercurial-scm.org/downloads&lt;/a&gt; &lt;br&gt;
    (some mbed libs use Mercurial)&lt;/li&gt;
&lt;li&gt;Install gcc for arm, towards the end of the install make sure to select to add the tools to the path via the tick box - &lt;a href="https://launchpad.net/gcc-arm-embedded"&gt;https://launchpad.net/gcc-arm-embedded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Finally install the python script mbed-cli via "pip install mbed-cli"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They recommend using a gcc version of around 4.9 or so (although I've been trying stuff out with the latest one)&lt;/p&gt;
&lt;p&gt;These are some of the links that relate to the install&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.mbed.com/docs/mbed-os-handbook/en/5.1/getting_started/blinky_cli/)"&gt;https://docs.mbed.com/docs/mbed-os-handbook/en/5.1/getting_started/blinky_cli/)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mbed.com/docs/mbed-os-handbook/en/5.1/dev_tools/cli/"&gt;https://docs.mbed.com/docs/mbed-os-handbook/en/5.1/dev_tools/cli/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cM0dFoTuU14"&gt;https://www.youtube.com/watch?v=cM0dFoTuU14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Project system&lt;/h2&gt;
&lt;p&gt;Mbed has a concept of it's own project system that it uses via the mbed-cli tool&lt;/p&gt;
&lt;p&gt;To create a new directory and set it up as an mbed project&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mbed new mbed-os-program
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To turn the existing current directory into an mbed project&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mbed new .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Under the hood I think "mbed new" changes the directory into a git repository with "git init", then uses "mbed add" to add the mbed-os as the base library
and I think a couple of other things.&lt;/p&gt;
&lt;p&gt;To download and setup the example project blinky&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mbed&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ARMmbed&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mbed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blinky&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the same as a "git clone", followed by a "mbed deploy", followed by a "mbed new ."&lt;/p&gt;
&lt;h2&gt;Libraries&lt;/h2&gt;
&lt;p&gt;When using libraries within mbed there's two parts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;.lib&lt;/strong&gt; file that registers that a library has been used within the project&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;directory&lt;/strong&gt; that contains the library files / code etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When checking code into git / source control the library directory is not checked in (just the .lib file).
This way for a new user that downloads the source code they can run "mbed deploy" which is similar to Nuget restore.
This reads in the .lib files downloads the library content and also resolves any dependencies for other libs that also have to be downloaded.
This avoids having the actual library content sitting in your git repository, and allows you to use custom versions of the library&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mbed add&lt;/strong&gt; checks for library dependencies and downloads any other libs required.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mbed remove&lt;/strong&gt; cleans up any .lib files left over when a library is removed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mbed add https://developer.mbed.org/users/wim/code/TextLCD/
mbed remove TextLCD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Listing libraries installed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mbed ls -a
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Mbed has several different ways of storing it's configuration which are just key value pairs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Global Settings&lt;/strong&gt; (mbed config --global)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local Settings&lt;/strong&gt; (mbed config) - stored in the .lib files&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mbed_settings.py&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;options passed to &lt;strong&gt;mbed compile&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's also a mbed_app.json application configuration file which gets expanded into a set of Macros for the compiled application&lt;/p&gt;
&lt;p&gt;The three important ones to be aware of are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Target&lt;/strong&gt; - this defines a mbed board such as "LPC1768"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Toolchain&lt;/strong&gt; - this can be GCC_ARM, ARM, IAR and is just which compiler to use (set to GCC_ARM typically)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Toolchain Path&lt;/strong&gt; - this is just the path to the compiler tools&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mbed.com/docs/mbed-os-handbook/en/5.1/dev_tools/cli/#mbed-cli-configuration"&gt;https://docs.mbed.com/docs/mbed-os-handbook/en/5.1/dev_tools/cli/#mbed-cli-configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mbed config target LPC1768
mbed toolchain GCC_ARM
mbed config GCC_ARM_PATH &amp;quot;C:\Program Files (x86)\GNU Tools ARM Embedded\5.4 2016q3\bin&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To list all settings&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mbed config --list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To set a value&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mbed config ARM_PATH &amp;quot;C:\Program Files\ARM&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To unset a value&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mbed config --unset ARM_PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Compiling&lt;/h2&gt;
&lt;p&gt;When compiling most of the options can be set via the configuration values above &lt;br&gt;&lt;/p&gt;
&lt;p&gt;it's also possible to override some of those settings such as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mbed compile -t LPC1768 -t GCC_ARM
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which triggers the compile but also overrides the target and compiler to use&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Macros can be set with the -D option such as "-DUVISOR_PRESENT"&lt;/li&gt;
&lt;li&gt;A build profile can be set with the --profile option such as "--profile mbed-os/tools/profiles/debug.json"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are currently 3 build profiles Default, Debug and Small&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ARMmbed/mbed-os/blob/master/docs/build_profiles.md"&gt;https://github.com/ARMmbed/mbed-os/blob/master/docs/build_profiles.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ARMmbed/mbed-os/blob/master/docs/Toolchain_Profiles.md"&gt;https://github.com/ARMmbed/mbed-os/blob/master/docs/Toolchain_Profiles.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compile Options&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-m&lt;/strong&gt;  Override the target board to use, such as LPC1768&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-t&lt;/strong&gt;  Override which toolchain target to use, this can be GCC_ARM, ARM, IAR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--source&lt;/strong&gt;    Specify the source directory, the default is the current directory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--build&lt;/strong&gt;     Specify the build directory, the default is &lt;strong&gt;BUILD/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--profile&lt;/strong&gt;   This selects the build profile / options to use for the compiler.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--library&lt;/strong&gt;   Compile as a static library, .a or .ar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-c&lt;/strong&gt;      Do a clean build / rebuild to build from scratch&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-j&lt;/strong&gt;      Control the number of threads for compiling, default is 0 which uses the number of cores on the machine&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--app-config&lt;/strong&gt;    Override the path to the application configuration file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--config&lt;/strong&gt;    Show the compile time configurations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--prefix&lt;/strong&gt;    Filters the output from --config&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--supported&lt;/strong&gt; Show list of supported platforms, toolchains&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-v -vv&lt;/strong&gt;      Verbose Output&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example Build&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mbed&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ARMmbed&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mbed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blinky&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;mbed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blinky&lt;/span&gt;

&lt;span class="n"&gt;mbed&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="n"&gt;LPC1768&lt;/span&gt;
&lt;span class="n"&gt;mbed&lt;/span&gt; &lt;span class="n"&gt;toolchain&lt;/span&gt; &lt;span class="n"&gt;GCC_ARM&lt;/span&gt;
&lt;span class="n"&gt;mbed&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;GCC_ARM_PATH&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C:\Program Files (x86)\GNU Tools ARM Embedded&lt;/span&gt;&lt;span class="se"&gt;\5&lt;/span&gt;&lt;span class="s2"&gt;.4 2016q3&lt;/span&gt;&lt;span class="se"&gt;\b&lt;/span&gt;&lt;span class="s2"&gt;in&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Example of setting for debugging and overriding the target&lt;/span&gt;
&lt;span class="n"&gt;mbed&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;LPC1768&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="n"&gt;mbed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;profiles&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="c1"&gt;# End result will be in .\BUILD\LPC1768\GCC_ARM\mbed-os-example-blinky.bin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="micro"></category><category term="mbed"></category><category term="mbed-cli"></category></entry><entry><title>Setting up the IceStorm FPGA tools for Windows</title><link href="http://grbd.github.io/posts/2016/09/12/setting-up-the-icestorm-fpga-tools-for-windows/" rel="alternate"></link><published>2016-09-12T21:30:00+01:00</published><updated>2016-09-12T21:30:00+01:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2016-09-12:/posts/2016/09/12/setting-up-the-icestorm-fpga-tools-for-windows/</id><summary type="html">&lt;p&gt;Setting up the IceStorm FPGA tools for Windows&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;There was recently a presentation by the team running the icestorm project over at the Manchester Hackspace. &lt;br&gt;
Icestorm is a project that provides a fpga board for under $30 (about 25 Pounds in British money) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackaday.com/2016/08/03/the-perfect-storm-open-arm-fpga-board/"&gt;https://hackaday.com/2016/08/03/the-perfect-storm-open-arm-fpga-board/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.clifford.at/icestorm/"&gt;http://www.clifford.at/icestorm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.clifford.at/yosys/"&gt;http://www.clifford.at/yosys/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typically, the two largest vendors of fpga's tend to be Altera and Zynq.
However, both of these vendors require closed source tools which tend to be very large to compile down from Verilog or VHDL
into code that can be used on the FPGA.&lt;/p&gt;
&lt;p&gt;With this board a &lt;strong&gt;&lt;a href="http://www.farnell.com/datasheets/1673535.pdf"&gt;iCE40HX4K&lt;/a&gt;&lt;/strong&gt; from Lattice Semiconductor is used instead. &lt;br&gt;
The team behind this project have built up a full open source toolchain for it.&lt;/p&gt;
&lt;p&gt;I don't have a board yet (I'm thinking of building a modified one)
But I decided to see if I could build out the initial tools needed to compile Verilog.
With the eventual plan to use &lt;a href="http://www.myhdl.org/"&gt;Myhdl&lt;/a&gt; which would compile down to ether Verilog / VHDL for use on the board&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;h3&gt;MSYS2&lt;/h3&gt;
&lt;p&gt;First for windows you'll need a copy of MSYS2 installed if you haven't already got it&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msys2.github.io/"&gt;https://msys2.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once it's installed you can update the package database / packages via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -Syuu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are 3 shells available in total&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSYS2&lt;/li&gt;
&lt;li&gt;MinGW 32Bit&lt;/li&gt;
&lt;li&gt;MinGW 64bit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For building some of the below sources I use MSYS2 and for others I use MinGW.
Strictly speaking the only real difference is the C library that they link against.
Based on this Link &lt;a href="https://sourceforge.net/p/msys2/discussion/general/thread/dcf8f4d3/"&gt;https://sourceforge.net/p/msys2/discussion/general/thread/dcf8f4d3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSYS2 Better understands POSIX conventions like paths, it does have a performance penalty compared to MinGW
since it funnels everything via msys-2.0.dll. But it can work sometimes better than MinGW when trying to compile Linux apps under Windows.&lt;/p&gt;
&lt;p&gt;MinGW does not depend on msys-2.0.dll and instead uses the MSVC runtime. &lt;br&gt;
For the below I'm only really interested it getting things to work, so I've just used whichever one works best for each source package.&lt;/p&gt;
&lt;h3&gt;MSYS2 - Depends&lt;/h3&gt;
&lt;p&gt;Next we need to install some dependencies, open up a MSYS2 shell and install the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S mingw64/mingw-w64-x86_64-clang
pacman -S msys/bison
pacman -S msys/flex
pacman -S msys/libreadline-devel
pacman -S msys/gawk
pacman -S msys/tcl
pacman -S msys/libffi-devel
pacman -S git
pacman -S cmake
pacman -S mercurial
pacman -S msys/pkg-config
pacman -S python
pacman -S python3
pacman -S mingw64/mingw-w64-x86_64-libftdi
pacman -S mingw64/mingw-w64-x86_64-python3-pip
pacman -S mingw64/mingw-w64-x86_64-python2-pip
pacman -S mingw64/mingw-w64-x86_64-dlfcn
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Xdot - Python&lt;/h3&gt;
&lt;p&gt;Let's install xdot next, there currently isn't a pacman package for it, so I've used python / pip since it's a python based library &lt;br&gt;
Within a &lt;strong&gt;MinGW x64&lt;/strong&gt; window&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip2 install xdot
pip3 install xdot
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Icestorm Tools&lt;/h3&gt;
&lt;p&gt;Next let's build and install icestorm
I've found this doesn't work under MSYS2, but does work under &lt;strong&gt;MinGW x64&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/cliffordwolf/icestorm.git icestorm
cd icestorm
make PREFIX=/usr -j$(nproc)
make PREFIX=/usr install
cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should install the icebox tools to /usr/bin/&lt;/p&gt;
&lt;h3&gt;Arachne-pnr (The place and route tool)&lt;/h3&gt;
&lt;p&gt;Next let's build and install Arachne-pnr for the place and route tools &lt;br&gt;
I'm running this build within a MinGW x64 window as above&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/cseed/arachne-pnr.git arachne-pnr
cd arachne-pnr
make DESTDIR=/usr ICEBOX=/usr/share/icebox -j$(nproc)
make DESTDIR=/usr ICEBOX=/usr/share/icebox install
cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should install arachne-pnr to /usr/bin/&lt;/p&gt;
&lt;h3&gt;Yosys (Verilog synthesis)&lt;/h3&gt;
&lt;p&gt;For Yosys there is the pre-compiled version 0.6 available here&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.clifford.at/yosys/download.html"&gt;http://www.clifford.at/yosys/download.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although I think ideally we need the latest version from git for the iCE FPGA's &lt;br&gt;
From what I've discovered trying to build this under the MinGW console will not work. &lt;br&gt;
However, building under the MSYS2 Console does work, with a little tweaking of the Makefile.&lt;/p&gt;
&lt;p&gt;First let's download a copy of yosys&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/cliffordwolf/yosys.git yosys
&lt;span class="nb"&gt;cd&lt;/span&gt; yosys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we're going to configure make for MSYS2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make config-msys2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we need to patch the Makefile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://grbd.github.io/static/micro/fpga.icestorm.1/yosys-winpatch1.patch
patch -p1 &amp;lt; yosys-winpatch1.patch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we can start the build&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we can install the files into /usr/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr install
&lt;/pre&gt;&lt;/div&gt;</content><category term="micro"></category><category term="fpga"></category><category term="icestorm"></category></entry><entry><title>SCons builds with Visual Studio</title><link href="http://grbd.github.io/posts/2016/07/27/scons-builds-with-visual-studio/" rel="alternate"></link><published>2016-07-27T18:53:00+01:00</published><updated>2016-07-27T18:53:00+01:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2016-07-27:/posts/2016/07/27/scons-builds-with-visual-studio/</id><summary type="html">&lt;p&gt;SCons builds with Visual Studio&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;For a while now I've been looking for a decent build system with a language I can easily write and debug.&lt;/p&gt;
&lt;p&gt;During the very old days of Linux the main go to for a build system typically was &lt;em&gt;make&lt;/em&gt; and &lt;em&gt;configure&lt;/em&gt;.
Configure would check the system to see if a library was present and its location,
Make would use Makefile scripts to handle the actual compilation based on the results from configure.
Surrounding these two was autotools which included autoconf and automake to try and make writing these sorts of scripts a lot easier.
However, over time because of cross compatibility reasons, if you were new to this sort of thing, it could quite quickly become a rat's nest of code.&lt;/p&gt;
&lt;p&gt;Then came along CMake, CMake is a meta language in that it generates Make files in a similar fashion to autoconf and automake but all rolled into one
with an easier to use language and syntax.
CMake has now taken over as one of the more popular build systems since it's also windows and cross platform compatible.&lt;/p&gt;
&lt;p&gt;However personally I've never been that fond of CMake&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It has no fixed API for hooking into, forcing you to use the CMake language&lt;/li&gt;
&lt;li&gt;The CMake language while very cross platform lacks features (such as class's for example)&lt;/li&gt;
&lt;li&gt;You can't step through the code / build script with a debugger (I could be wrong on this one, but I've not found one)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I should point out there does appear to be an upcoming feature called server mode that may allow for some form of API access in the future&lt;/p&gt;
&lt;h2&gt;SCons / Cuppa&lt;/h2&gt;
&lt;p&gt;This is where SCons and Cuppa comes in.&lt;/p&gt;
&lt;p&gt;I've placed an example over on my GitHub account &lt;a href="https://github.com/grbd/GBD.Blog.Examples/tree/master/Source/SconsBuild"&gt;https://github.com/grbd/GBD.Blog.Examples/tree/master/Source/SconsBuild&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the past I've dabbled in a large number of different languages.
Currently my two favourites are .Net and python, the reason being they're debuggable via Visual Studio.
I've found that python makes for a very good scripting language, you can also easily debug it, add break points, get auto completion features etc.
In the open source world pycharm is one of the favourites for debugging python code this offers a lot of similar features.
My personal favourite though is the latest Visual Studio 2015 with python tools.
With VS Python tools we can get all the good auto completion features and can debug / step code to our hearts content.&lt;/p&gt;
&lt;p&gt;SCons is a python based build system, unlike CMake it doesn't generate make files in that it handles the build itself.
One of the main benefits of python is that it has a vast library of supporting code.
To give an example if I'm planning on writing a VC++ Visual Studio project but want to make it cross platform.
One approach might be to write the code using a VS project file, but for the build process read in the xml using python / SCons, then parse it to generate the build via SCons.
Or I could do it the other way around and have a VS Project file generated from a simple python block of code that lists all the source files.
python gives us a great deal of power to do interesting things not normally possible in other build systems.&lt;/p&gt;
&lt;h3&gt;Cuppa&lt;/h3&gt;
&lt;p&gt;Cuppa is an extension to SCons in that is possess some features that allow easier building of VC++ projects.
I haven't gotten around to exploring Cuppa just yet, but to install it under windows.&lt;/p&gt;
&lt;p&gt;First you'll need to install lxml, this doesn't seem to be installable via pip directly under windows.
But we can get a pre-packaged whl file from this site &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml"&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In my case since I'm using python 2.7 64bit, so I downloaded the &lt;em&gt;lxml-3.6.1-cp27-cp27m-win_amd64.whl&lt;/em&gt; file. &lt;br&gt;
After downloading it should just be a case of using pip from a command prompt to install the lxml package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install lxml-3.6.1-cp27-cp27m-win_amd64.whl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we can install cuppa using pip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install cuppa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've included some links below for some more information. &lt;br&gt;
The below example does not use Cuppa, as I'm just focusing on debugging the build script with Visual Studio for the below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ja11sop/cuppa"&gt;https://github.com/ja11sop/cuppa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=h_HhBT6xGeE"&gt;https://www.youtube.com/watch?v=h_HhBT6xGeE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Code Example&lt;/h2&gt;
&lt;p&gt;In the below example I'm going to show how I managed to debug a SCons python file (SConstruct) within Visual Studio using Python Tools&lt;/p&gt;
&lt;h3&gt;hello1.c&lt;/h3&gt;
&lt;p&gt;First let's create a very simple hello world program called &lt;strong&gt;hello1.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;SConstruct files&lt;/h3&gt;
&lt;p&gt;Visual Studio recognises python files based on the extension of .py
The SConstruct python script files that SCons looks for lacks this extension which creates a problem.
One way around this is to use two files&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SConstruct&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;execfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SConstruct.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;SConstruct.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!python&lt;/span&gt;

&lt;span class="c1"&gt;# These import lines are not really needed, but it helps intellisense within VS when editing the script&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;SCons.Script&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;SCons.Environment&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;

&lt;span class="c1"&gt;# For a more detailed / cross platform build script see&lt;/span&gt;
&lt;span class="c1"&gt;# https://bitbucket.org/scons/scons/wiki/AllInSConstruct&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Building Hello1.c&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Add the Debug Flags if debug=1 is specified on the command line, this tends to be compiler specific&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ARGUMENTS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CPPDEFINES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CCFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/MDd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CCFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Zi /Fd${TARGET}.pdb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LINKFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Debug&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CPPDEFINES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NDEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Release&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Building: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;

&lt;span class="c1"&gt;# Create a hello1.exe from the c file&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src/hello1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src/hello1.c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first file SConstruct is read in by the SCons tool initially, this just has a single line of code which basically says read in and process SConstruct.py.
The SConstruct.py file is where all of our build logic is stored, this is the file we'll be editing and using within Visual Studio&lt;/p&gt;
&lt;p&gt;Note that SCons automatically imports SCons.Script before running the script, I've included it anyway just to help out with VS Intellisense&lt;/p&gt;
&lt;h2&gt;Setting up the Visual Studio files for the Build&lt;/h2&gt;
&lt;p&gt;Next we're going to setup a VS Solution and Project file to debug the build script&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a sub directory of &lt;strong&gt;vs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create a new Solution, call it something like &lt;strong&gt;BuildSolution&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create a new Python Application project, call it something like &lt;strong&gt;SConsBuild&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Right click on the project, and select Project Properties&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;General Tab&lt;/h3&gt;
&lt;p&gt;Next we're going to set a couple of options under the &lt;strong&gt;General Tab&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the start-up script to &lt;strong&gt;C:\Python27\Scripts\scons.py&lt;/strong&gt;, this path may be different based on your python install.&lt;br&gt;
    Visual Studio needs to use absolute paths for this option.&lt;/li&gt;
&lt;li&gt;Set the working directory to the location of the SConstruct file / root of the source project, this can be a relative path such as &lt;strong&gt;..\..&lt;/strong&gt; &lt;br&gt;
    The path should be relative to the location of the project file.&lt;/li&gt;
&lt;li&gt;Make sure to set the python interpreter to Python2, such as &lt;strong&gt;Python 64-bit 2.7&lt;/strong&gt; &lt;br&gt;
    SCons does not yet support python3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="GeneralProps1" src="http://grbd.github.io/static/code/scons.1.vsdebug/GeneralProps1.png"&gt;&lt;/p&gt;
&lt;h3&gt;Debug Tab&lt;/h3&gt;
&lt;p&gt;Next looking at the &lt;strong&gt;Debug Tab&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the search paths ..\..\;C:\Python27\Lib\site-packages\scons-2.5.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The search path needs to include the relative path to where the SConstruct file is located.
Also it needs to include the directory for the SCons installation, I found this is needed to get Intellisense working with the script.
It looks as if SCons has deliberately put the library files within a SCons subdirectory in the site-packages install directory for python.
I suspect this has been done to avoid users from calling the SCons library directly without first going via the main scons.py script.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DebugProps1" src="http://grbd.github.io/static/code/scons.1.vsdebug/DebugProps1.png"&gt;&lt;/p&gt;
&lt;h3&gt;Build file link&lt;/h3&gt;
&lt;p&gt;Finally, we just need to add in the &lt;strong&gt;SConsBuild.py&lt;/strong&gt; file as a Link to the project.
By adding it as a link we avoid creating a 2nd copy under the VS Project directory, and when we edit the file we'll be editing the one in the original location.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AddLink1" src="http://grbd.github.io/static/code/scons.1.vsdebug/AddLink1.png"&gt;&lt;/p&gt;
&lt;h3&gt;Note about Intellisense&lt;/h3&gt;
&lt;p&gt;Just a quick note, sometimes after creating a new project, you need to right click unload, then re-load the project within Visual Studio to get the Intellisense working correctly&lt;/p&gt;
&lt;h2&gt;Setting up the Visual Studio files for the hello code&lt;/h2&gt;
&lt;p&gt;For the &lt;strong&gt;hello1.c&lt;/strong&gt; file within the blog example code I also setup a Visual Studio Project.
This allowed me to edit the code from within Visual Studio and trigger the build process from there as well.&lt;/p&gt;
&lt;p&gt;In order to do this, you're going to want to use a &lt;em&gt;Makefile&lt;/em&gt; style Visual Studio Project. These types of projects allow for custom build tools to be specified instead of using the inbuilt MS build tools. In this case we're going to set it to use the SCons tool to handle the building and cleaning of the project.&lt;/p&gt;
&lt;p&gt;After creating one of these types of Project, if you open up the project properties you'll notice the Configuration Type is listed as &lt;em&gt;Makefile&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hello1_General" src="http://grbd.github.io/static/code/scons.1.vsdebug/Hello1_General.png"&gt;&lt;/p&gt;
&lt;p&gt;The import part that we need to alter is located under the NMake tab.
The debug=1 is just an option we can pass to the SCons script to indicate if it's a Release or Debug Build&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build: scons -C ..\.. debug=1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rebuild All: scons -C ..\.. -c &amp;amp;&amp;amp; scons -C ..\.. debug=1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clean: scons -C ..\.. -c&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Destination exe: ..\..\src\hello1.exe&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Hello1_NMake" src="http://grbd.github.io/static/code/scons.1.vsdebug/Hello1_NMake.png"&gt;&lt;/p&gt;
&lt;h2&gt;Debugging the build script&lt;/h2&gt;
&lt;p&gt;I've not really covered any of the details on using the SCons API at this stage simply because I'm still learning it myself.
But if everything has been setup correctly we should now be able to run / debug the SCons build script within Visual Studio.
For a script as simple as this one it's probably not worth the time and effort to set something like this up, but for a much more complex project
finding problems and issues with the build scripts can be a made a lot easier when you can single step the code within the build script itself.&lt;/p&gt;
&lt;p&gt;This is really more of a convenience than anything else, you can still edit the build scripts independently of Visual Studio,
and it's likely you could setup something very similar using pycharm (the free open source equivalent to VS Python Tools).
But for me at least this should make life a lot easier for cross platform or even cross compiling complex builds.&lt;/p&gt;</content><category term="code"></category><category term="SCons"></category><category term="build"></category></entry><entry><title>Building GTK3 / GtkSharp under Windows - Manual Build</title><link href="http://grbd.github.io/posts/2016/06/30/building-gtk3-gtksharp-under-windows-manual-build/" rel="alternate"></link><published>2016-06-30T12:00:00+01:00</published><updated>2016-06-30T12:00:00+01:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2016-06-30:/posts/2016/06/30/building-gtk3-gtksharp-under-windows-manual-build/</id><summary type="html">&lt;p&gt;Building GTK3 under Windows&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Looking at the current NuGet packages for GtkSharp and the gtk3 binaries within GtkSharp.Win32.
These are not for the most recent version of Gtk3.
I decided to look into the process for building GTK3 and the latest version of GtkSharp under windows.
This also has the advantage of possibly using 64bit versions of GTK3.&lt;/p&gt;
&lt;p&gt;The first links I looked into were&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gtk.org/download/windows.php"&gt;http://www.gtk.org/download/windows.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wingtk/gtk-win32"&gt;https://github.com/wingtk/gtk-win32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with the gtk-win32 build though is that the Dll's lack the "lib" prefix to the Dll names.
This is something that's expected by GtkSharp for cross compatibility with Linux.
Since there is interdependence between the different Dll's, simply renaming them wouldn't be enough.&lt;/p&gt;
&lt;h2&gt;Native Libs&lt;/h2&gt;
&lt;p&gt;Fortunately, there's a very easy way to get the Dll's we need prebuilt, and that is to just copy them out of MSYS2 &lt;br&gt;
First we need to install MSYS2 from &lt;a href="https://msys2.github.io/"&gt;https://msys2.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next open up a MSYS2 prompt then run the following to update the package database&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -Syuu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To search for a package&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -Ss gtk3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installing the 32Bit Dll's&lt;/h3&gt;
&lt;p&gt;Let's now open a MinGW &lt;strong&gt;32bit&lt;/strong&gt; console window (bundled with MSYS2). &lt;br&gt;
We can use the following to install the Dll's we want.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S mingw-w64-i686-gcc mingw-w64-i686-glib2
pacman -S mingw-w64-i686-pango mingw-w64-i686-atk mingw-w64-i686-gtk3
pacman -S mingw-w64-i686-zlib mingw-w64-i686-libiconv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we now look within &lt;strong&gt;C:\msys64\mingw32\bin&lt;/strong&gt;, we can harvest the native library Dll's we want to use with GtkSharp &lt;br&gt;
Using PE Explorer to look at the Dll depends to pick out what I need for GTK3, I came up with the below list for gtk3 3.20.4-1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GTK Libs:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;libatk-1.0-0.dll
libcairo-2.dll
libcairo-gobject-2.dll
libgdk_pixbuf-2.0-0.dll
libgdk-3-0.dll
libgio-2.0-0.dll
libglib-2.0-0.dll
libgmodule-2.0-0.dll
libgobject-2.0-0.dll
libgtk-3-0.dll
libpango-1.0-0.dll
libpangocairo-1.0-0.dll
libpangoft2-1.0-0.dll
libpangowin32-1.0-0.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;libbz2-1.dll
libepoxy-0.dll
libexpat-1.dll
libffi-6.dll
libfontconfig-1.dll
libfreetype-6.dll
libgcc_s_dw2-1.dll
libgraphite2.dll
libharfbuzz-0.dll
libiconv-2.dll
libintl-8.dll
liblzma-5.dll
libpcre-1.dll
libpixman-1-0.dll
libpng16-16.dll
libstdc++-6.dll
libwinpthread-1.dll
libxml2-2.dll
zlib1.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installing the 64Bit Dll's&lt;/h3&gt;
&lt;p&gt;For the 64bit Dll's we can do something very similar to the above &lt;br&gt;
Under a MinGw 64bit console window&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-glib2
pacman -S mingw-w64-x86_64-pango mingw-w64-x86_64-atk mingw-w64-x86_64-gtk3
pacman -S mingw-w64-x86_64-zlib mingw-w64-x86_64-libiconv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should result in the equivalent 64bit files to show up under &lt;strong&gt;C:\msys64\mingw64\bin&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;GtkSharp .Net Libs&lt;/h2&gt;
&lt;h3&gt;The Build process&lt;/h3&gt;
&lt;p&gt;Next we're going to need to build the GtkSharp sources into .Net Dll's&lt;/p&gt;
&lt;p&gt;Just to explain a bit about how the build process works. &lt;br&gt;
The build process can be described as a 2 stage process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gapi-parser&lt;/strong&gt; - generate xml files from original gtk source code libraries&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure / make&lt;/strong&gt; - generate some of the .cs files from the xml files from stage 1
    and create the compiled Dll's we need to run GtkSharp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first stage is usually done already for us by the person maintaining the source repo. &lt;br&gt;
Looking at the git repo &lt;a href="https://github.com/openmedicus/gtk-sharp.git"&gt;https://github.com/openmedicus/gtk-sharp.git&lt;/a&gt; this seems to match the version of gtk3 within MSYS2 &lt;br&gt;
so we should be able to skip over this stage&lt;/p&gt;
&lt;p&gt;From what I can gather the above step involves&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extracting the source code for the different gtk libraries into the sources directory located within gtk-sharp.&lt;/li&gt;
&lt;li&gt;running &lt;em&gt;make api&lt;/em&gt; to generate the .raw files located within each of the source directories such as gdk-api.raw.&lt;/li&gt;
&lt;li&gt;The input file for this process is sources.xml&lt;/li&gt;
&lt;li&gt;under the hood the Makefile calls &lt;em&gt;..\parser\gapi-parser sources.xml&lt;/em&gt; &lt;br&gt;&lt;/li&gt;
&lt;li&gt;The parsing is actually handled via &lt;a href="http://www.mono-project.com/GAPI"&gt;http://www.mono-project.com/GAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second stage is the part we're interested in; this involves the make build system.
I've found the easiest way to do this is via the use of MSYS2 / MinGW Console.&lt;/p&gt;
&lt;h3&gt;Setting up MSYS2&lt;/h3&gt;
&lt;p&gt;First we need to setup MSYS2 to handle the build process for gtksharp &lt;br&gt;
Let's start a "MinGw-w64 Win32 Shell" &lt;br&gt;
One of the first packages we need is gcc so let's install that first&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S mingw-w64-i686-gcc mingw-w64-i686-glib2
pacman -S mingw-w64-i686-pango mingw-w64-i686-atk mingw-w64-i686-gtk3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's install a couple more packages to help out&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S gzip nasm patch tar xz gettext make coreutils diffutils wget
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Downloading the Source&lt;/h3&gt;
&lt;p&gt;Next we need to download the source for gtk-sharp. &lt;br&gt;
Let's create a new directory called &lt;strong&gt;C:\gtk-build&lt;/strong&gt; and download the gtk-sharp source into that directory&lt;/p&gt;
&lt;p&gt;Using a Visual Studio Developer command prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;cd&lt;/span&gt; C:\gtk-build
git clone https://github.com/openmedicus/gtk-sharp.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note I had to make a small change to the source to get it to build, the fork is located here &lt;a href="https://github.com/grbd/gtk-sharp.git"&gt;https://github.com/grbd/gtk-sharp.git&lt;/a&gt;&lt;br&gt;
I've submitted a pull request for this to be submitted to the main tree&lt;/p&gt;
&lt;h3&gt;Running the Build Scripts&lt;/h3&gt;
&lt;p&gt;Next we need to run the build scripts from within MSYS2&lt;br&gt;
The link below is a bit out of date but it was useful for me to figure out how to handle the build process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mono-project.com/archived/compiling_gtksharp/"&gt;http://www.mono-project.com/archived/compiling_gtksharp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To start the build switch back to the MinGW Prompt we opened earlier and run the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:/c/Program&lt;span class="se"&gt;\ &lt;/span&gt;Files&lt;span class="se"&gt;\ \(&lt;/span&gt;x86&lt;span class="se"&gt;\)&lt;/span&gt;/Microsoft&lt;span class="se"&gt;\ &lt;/span&gt;SDKs/Windows/v10.0A/bin/NETFX&lt;span class="se"&gt;\ &lt;/span&gt;4.6&lt;span class="se"&gt;\ &lt;/span&gt;Tools/
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:/c/Windows/Microsoft.NET/Framework/v4.0.30319/

&lt;span class="nb"&gt;cd&lt;/span&gt; /c/gtk-build/gtk-sharp/
./autogen.sh --prefix&lt;span class="o"&gt;=&lt;/span&gt;/tmp/install
make
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;End Result&lt;/h3&gt;
&lt;p&gt;The end result should be a series of .Net Dll files located within subdirectories of the gtk-sharp directory. &lt;br&gt;
I avoided running &lt;em&gt;make install&lt;/em&gt; as that seems to try copying / registering the Dll's into the GAC of the local system. &lt;br&gt;
Instead I'm more interested in using these files along with the native Dll libs above for the bundling into NuGet Packages. &lt;br&gt;
In order to test this out manually&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a simple test app within Visual Studio&lt;/li&gt;
&lt;li&gt;Copy and paste all the native Dll's mentioned above, along with the .net Dll's from GtkSharp into the Debug/bin directory
    (the destination where everything is compiled to for the test application)&lt;/li&gt;
&lt;li&gt;Manually add references within the test application to the copied .Net Dll's&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should allow you to get an application up and running for testing&lt;/p&gt;
&lt;h2&gt;Next Step&lt;/h2&gt;
&lt;p&gt;For the next step I'll probably look into a way of building this more automatically perhaps via a python script.
With any luck I might be able to get some of my own custom NuGet packages uploaded.&lt;/p&gt;
&lt;p&gt;Many thanks to those that are maintaining a GtkSharp for gtk3,
This seems to be currently one of the few libraries that is production ready for use as a cross platform Desktop GUI at the moment.&lt;/p&gt;</content><category term="code"></category><category term="dotnet"></category><category term="GtkSharp"></category><category term="gtk"></category></entry><entry><title>GtkSharp - Part 5 - Themes and ClearText</title><link href="http://grbd.github.io/posts/2016/06/25/gtksharp-part-5-themes-and-cleartext/" rel="alternate"></link><published>2016-06-25T23:30:00+01:00</published><updated>2016-06-25T23:30:00+01:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2016-06-25:/posts/2016/06/25/gtksharp-part-5-themes-and-cleartext/</id><summary type="html">&lt;p&gt;Using themes within GtkSharp and enabling cleartype font text&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;One of the interesting features of GtkSharp and GTK3 is its theming ability.
Although there doesn't seem to be a lot of documentation on handling this easily within .Net and GtkSharp&lt;/p&gt;
&lt;p&gt;After a bit of digging around I've recently managed to get themes working with GtkSharp.
Also I've discovered a fix for cleartext to make the fonts look nicer under windows and to alter the dpi settings. &lt;br&gt;
As with prior code, I've placed examples within a gitrepo of &lt;a href="https://github.com/grbd/GBD.Blog.Examples"&gt;https://github.com/grbd/GBD.Blog.Examples&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;GTK 3 Themes&lt;/h2&gt;
&lt;h3&gt;Theme Versions&lt;/h3&gt;
&lt;p&gt;The first thing to be aware of is the version of gtk in use, within the NuGet package &lt;em&gt;GtkSharp.Win32&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When theming it's important to use a theme compatible with the version of gtk used by GtkSharp, currently that's &lt;strong&gt;gtk-3.14&lt;/strong&gt; as of writing with the NuGet package &lt;br&gt;
With &lt;strong&gt;gtk-3.14&lt;/strong&gt; and upwards the theme engine (which used to be a separate Dll in older versions) is now bundled within the gtk libs &lt;br&gt;
If you pick a theme that complains about "adwaita not found" when loading, it's probably designed for an older version of gtk and is trying to load the engine which is already in memory&lt;/p&gt;
&lt;p&gt;For a list of themes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnome-look.org/"&gt;https://www.gnome-look.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Selecting a theme&lt;/h3&gt;
&lt;p&gt;In order to load in a theme with GtkSharp / gtk3 we can use something similar to the below&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For C#&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Load the Theme&lt;/span&gt;
&lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CssProvider&lt;/span&gt; &lt;span class="n"&gt;css_provider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CssProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;css_provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadFromPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;themes/DeLorean-Dark-3.14/gtk-3.0/gtk.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StyleContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddProviderForScreen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;css_provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;800&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;For Visual Basic:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39; Load the Theme&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="n"&gt;css_provider&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="k"&gt;New&lt;/span&gt; &lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CssProvider&lt;/span&gt;
&lt;span class="n"&gt;css_provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadFromPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;themes/DeLorean-Dark-3.14/gtk-3.0/gtk.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StyleContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddProviderForScreen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;css_provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By using LoadFromPath to load in the root css file (usually gtk-3.0/gtk.css) &lt;br&gt;
From that point onwards everything else should be loaded in automatically. &lt;br&gt;
In order for the above to work, the themes directory needs to be relative to the exe, although an absolute path can be specified.&lt;/p&gt;
&lt;h3&gt;The old theme selection method&lt;/h3&gt;
&lt;p&gt;One older method of loading themes within GtkSharp was the use of Settings.Default.ThemeName&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThemeName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;delorean-dark-theme-3.9&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the more recent version of GtkSharp / gtk3 this doesn't appear to work. &lt;br&gt;
However it still might be useful if your using an older version of GtkSharp with gtk2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.gnome.org/gtk3/stable/GtkSettings.html#GtkSettings--gtk-theme-name"&gt;https://developer.gnome.org/gtk3/stable/GtkSettings.html#GtkSettings--gtk-theme-name&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ClearText&lt;/h3&gt;
&lt;p&gt;Based on some observations of the end result, I discovered that under windows there was potentially a problem with the default setting for the use of ClearText.
ClearText has an impact on the visibility / smoothness of the displayed fonts within Gtk and GtkSharp.
With applications run from MSYS2 with the default theme, compared to an application running from GtkSharp, the fonts do seem to be very different by default&lt;/p&gt;
&lt;p&gt;This is something that may be fixed eventually within the gtk libs (GtkSharp.Win32)
But for now one way around this is to use some code similar to the below&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For C#&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ApplyTheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Based on this Link http://awesome.naquadah.org/wiki/Better_Font_Rendering&lt;/span&gt;

    &lt;span class="c1"&gt;// Get the Global Settings&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;setts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// This enables clear text on Win32, makes the text look a lot less crappy&lt;/span&gt;
    &lt;span class="n"&gt;setts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XftRgba&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rgb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// This enlarges the size of the controls based on the dpi&lt;/span&gt;
    &lt;span class="n"&gt;setts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XftDpi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;96&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// By Default Anti-aliasing is enabled, if you want to disable it for any reason set this value to 0&lt;/span&gt;
    &lt;span class="c1"&gt;//setts.XftAntialias = 0&lt;/span&gt;
    &lt;span class="c1"&gt;// Enable text hinting&lt;/span&gt;
    &lt;span class="n"&gt;setts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XftHinting&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//setts.XftHintstyle = &amp;quot;hintslight&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;setts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XftHintstyle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hintfull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Load the Theme&lt;/span&gt;
    &lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CssProvider&lt;/span&gt; &lt;span class="n"&gt;css_provider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CssProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//css_provider.LoadFromPath(&amp;quot;themes/DeLorean-3.14/gtk-3.0/gtk.css&amp;quot;)&lt;/span&gt;
    &lt;span class="n"&gt;css_provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadFromPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;themes/DeLorean-Dark-3.14/gtk-3.0/gtk.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StyleContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddProviderForScreen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;css_provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;800&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;For Visual Basic:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="k"&gt;Shared&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;ApplyTheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39; Based on this Link http://awesome.naquadah.org/wiki/Better_Font_Rendering&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39; Get the Global Settings&lt;/span&gt;
    &lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="n"&gt;setts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39; This enables clear text on Win32, makes the text look a lot less crappy&lt;/span&gt;
    &lt;span class="n"&gt;setts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XftRgba&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rgb&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39; This enlarges the size of the controls based on the dpi&lt;/span&gt;
    &lt;span class="n"&gt;setts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XftDpi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39; By Default Anti-aliasing is enabled, if you want to disable it for any reason set this value to 0&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;setts.XftAntialias = 0&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39; Enable text hinting&lt;/span&gt;
    &lt;span class="n"&gt;setts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XftHinting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;setts.XftHintstyle = &amp;quot;hintslight&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;setts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XftHintstyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hintfull&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39; Load the Theme&lt;/span&gt;
    &lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="n"&gt;css_provider&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="k"&gt;New&lt;/span&gt; &lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CssProvider&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;css_provider.LoadFromPath(&amp;quot;themes/DeLorean-3.14/gtk-3.0/gtk.css&amp;quot;)&lt;/span&gt;
    &lt;span class="n"&gt;css_provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadFromPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;themes/DeLorean-Dark-3.14/gtk-3.0/gtk.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StyleContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddProviderForScreen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;css_provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;End Result&lt;/h2&gt;
&lt;p&gt;The end result should be a form which looks a lot clearer and can use a custom theme at the same time&lt;/p&gt;
&lt;h3&gt;No Themes or ClearText&lt;/h3&gt;
&lt;p&gt;The first example is no theming or cleartext under Windows 10&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example1" src="http://grbd.github.io/static/code/gtksharp.5.theming/Example1.png"&gt;&lt;/p&gt;
&lt;h3&gt;Themes but no ClearText&lt;/h3&gt;
&lt;p&gt;This next example has theming but with no cleartext&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example2" src="http://grbd.github.io/static/code/gtksharp.5.theming/Example2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Themes and ClearText&lt;/h3&gt;
&lt;p&gt;This final example has both theming and cleartext enabled&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example3" src="http://grbd.github.io/static/code/gtksharp.5.theming/Example3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;a href="http://grbd.github.io/posts/2016/06/25/gtksharp-part-4-handles-and-withevents-example/"&gt;GtkSharp - Part 4 - Handles and WithEvents Example&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="dotnet"></category><category term="GtkSharp"></category></entry><entry><title>GtkSharp - Part 4 - Handles and WithEvents Example</title><link href="http://grbd.github.io/posts/2016/06/25/gtksharp-part-4-handles-and-withevents-example/" rel="alternate"></link><published>2016-06-25T21:55:00+01:00</published><updated>2016-06-25T21:55:00+01:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2016-06-25:/posts/2016/06/25/gtksharp-part-4-handles-and-withevents-example/</id><summary type="html">&lt;p&gt;A second example using GtkSharp and Visual Studio with Handles and WithEvents&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is a second example of using GtkSharp within Visual Studio. &lt;br&gt;
One of the interesting things we can setup is the use of Handles and WithEvents.
This means that within the code window for the form, we can use the drop down fields in the same way we would with windows forms.&lt;/p&gt;
&lt;p&gt;&lt;img alt="VSImage" src="http://grbd.github.io/static/code/gtksharp.4.example2/VSImage1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="VSImage" src="http://grbd.github.io/static/code/gtksharp.4.example2/VSImage2.png"&gt;&lt;/p&gt;
&lt;p&gt;I've included example code within &lt;a href="https://github.com/grbd/GBD.Blog.Examples"&gt;https://github.com/grbd/GBD.Blog.Examples&lt;/a&gt; although for now this is VB only&lt;/p&gt;
&lt;h2&gt;GtkSharp Handles and WithEvents Example&lt;/h2&gt;
&lt;p&gt;For this next example we're going to use a similar project to the one used in the last part. &lt;br&gt;
But this time around we're going to split the code into 2 separate files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TestForm1.glade.vb&lt;/strong&gt; - This acts as a sort of wrapper and makes all the properties of the Form available&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TestForm1.vb&lt;/strong&gt; - This is where our application logic sits similar to what you would use with windows forms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll be using &lt;em&gt;WithEvents&lt;/em&gt; and &lt;em&gt;Handles&lt;/em&gt; instead of the &lt;strong&gt;Builder.Object&lt;/strong&gt; attribute. &lt;br&gt;
In order to link the properties to the controls on the form we can use code similar to &lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SendButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SendButton&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;TestForm1.glade.vb&lt;/h3&gt;
&lt;p&gt;First we need to create a wrapper class for the glade file.
With windows forms this type of file is usually auto generated and hidden, but in this case we don't have that luxury.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For Visual Basic:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;Gtk&lt;/span&gt;

&lt;span class="k"&gt;Partial&lt;/span&gt; &lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="k"&gt;Class&lt;/span&gt; &lt;span class="nc"&gt;TestForm1&lt;/span&gt;
    &lt;span class="k"&gt;Inherits&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;

&lt;span class="cp"&gt;#Region &amp;quot;Properties&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Used to load in the glade file resource as a window. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Private&lt;/span&gt; &lt;span class="n"&gt;_builder&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39; Put a list here of all the controls you want to access on the glade form from code&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39; Note When using WithEvents, we need to link to the objects on the form within the constructor&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39; Instead of using the Builder.Object attribute, this seems to be the only way when using WithEvents and Handles&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Connects to the SendButton on the Glade Window. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Friend&lt;/span&gt; &lt;span class="k"&gt;WithEvents&lt;/span&gt; &lt;span class="n"&gt;SendButton&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Connects to the InputText Control on the Glade Window. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Friend&lt;/span&gt; &lt;span class="k"&gt;WithEvents&lt;/span&gt; &lt;span class="n"&gt;StdInputTxt&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Event queue for all listeners interested in Loaded events. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="k"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;Loaded&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;EventHandler&lt;/span&gt;

&lt;span class="cp"&gt;#End Region&lt;/span&gt;

&lt;span class="cp"&gt;#Region &amp;quot;Constructors / Destructors&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Default Shared Constructor. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;returns&amp;gt; A TestForm1. &amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="k"&gt;Shared&lt;/span&gt; &lt;span class="k"&gt;Function&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;TestForm1&lt;/span&gt;
        &lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="k"&gt;New&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Nothing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GtkSharp_AdvForm1_VB.TestForm1.glade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;Nothing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;Return&lt;/span&gt; &lt;span class="k"&gt;New&lt;/span&gt; &lt;span class="n"&gt;TestForm1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;window1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Function&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Specialised constructor for use only by derived class. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;builder&amp;quot;&amp;gt; The builder. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;handle&amp;quot;&amp;gt;  The handle. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Protected&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;MyBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;_builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;
        &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Autoconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;&amp;#39; Link the Controls here instead of using Attributes&lt;/span&gt;
        &lt;span class="n"&gt;SendButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SendButton&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;StdInputTxt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;StdInputTxt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;&amp;#39; Form Loaded&lt;/span&gt;
        &lt;span class="k"&gt;RaiseEvent&lt;/span&gt; &lt;span class="n"&gt;Loaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Me&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;Nothing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;

&lt;span class="cp"&gt;#End Region&lt;/span&gt;

&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Class&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;TestForm1.vb&lt;/h3&gt;
&lt;p&gt;Next we need to create a class to house all of our control logic (similar again to the place where you would put code under windows forms)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For Visual Basic:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;Gtk&lt;/span&gt;

&lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Example Test Form for GTKSharp and Glade. &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;Partial&lt;/span&gt; &lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="k"&gt;Class&lt;/span&gt; &lt;span class="nc"&gt;TestForm1&lt;/span&gt;

&lt;span class="cp"&gt;#Region &amp;quot;Handlers&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;Private&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;TestForm1_Loaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="kt"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Handles&lt;/span&gt; &lt;span class="k"&gt;Me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Loaded&lt;/span&gt;
        &lt;span class="c"&gt;&amp;#39; Form Loaded event&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Handle Close of Form, Quit Application. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;o&amp;quot;&amp;gt;    Source of the event. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;args&amp;quot;&amp;gt; Event information to send to registered event handlers. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Private&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;TestForm1_DeleteEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="kt"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;DeleteEventArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Handles&lt;/span&gt; &lt;span class="k"&gt;Me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteEvent&lt;/span&gt;
        &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RetVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Handle Click of Button. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt; Source of the event. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;      Event information to send to registered event handlers. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Private&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;SendButton_Clicked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="kt"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Handles&lt;/span&gt; &lt;span class="n"&gt;SendButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Clicked&lt;/span&gt;
        &lt;span class="n"&gt;StdInputTxt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;

&lt;span class="cp"&gt;#End Region&lt;/span&gt;

&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Class&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Running the Application&lt;/h3&gt;
&lt;p&gt;When we run the application we should end up with a result similar to that as before.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example1" src="http://grbd.github.io/static/code/gtksharp.4.example2/Example1.png"&gt;&lt;/p&gt;
&lt;p&gt;The main difference now is that the setup is very familiar to those used to winforms,
also we have the option of using the drop downs within the code window to select different items and associated events&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;a href="http://grbd.github.io/posts/2016/06/25/gtksharp-part-3-basic-example-with-vs-and-glade/"&gt;GtkSharp - Part 3 - Basic Example with VS and Glade&lt;/a&gt;&lt;br&gt;
&lt;a href="http://grbd.github.io/posts/2016/06/25/gtksharp-part-5-themes-and-cleartext/"&gt;GtkSharp - Part 5 - Themes and ClearText&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="dotnet"></category><category term="GtkSharp"></category></entry><entry><title>GtkSharp - Part 3 - Basic Example with VS and Glade</title><link href="http://grbd.github.io/posts/2016/06/25/gtksharp-part-3-basic-example-with-vs-and-glade/" rel="alternate"></link><published>2016-06-25T19:36:00+01:00</published><updated>2016-06-25T19:36:00+01:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2016-06-25:/posts/2016/06/25/gtksharp-part-3-basic-example-with-vs-and-glade/</id><summary type="html">&lt;p&gt;Using GtkSharp version 3 within Visual Studio under windows&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;It's been a while since I posted my last blog entry so I decided to get a crack on with this one&lt;/p&gt;
&lt;p&gt;In this post I'm going to show how to get a basic GtkSharp application working using a glade xml file and some C#. &lt;br&gt;
For the below examples the code is downloadable via a GitHub link: &lt;a href="https://github.com/grbd/GBD.Blog.Examples"&gt;https://github.com/grbd/GBD.Blog.Examples&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;GtkSharp BasicForm1 Example&lt;/h2&gt;
&lt;h3&gt;Setting up the Project&lt;/h3&gt;
&lt;p&gt;First let's create a new C# Solution&lt;/p&gt;
&lt;p&gt;&lt;img alt="NewSolution1" src="http://grbd.github.io/static/code/gtksharp.3.example1/NewSolution1.png"&gt;&lt;/p&gt;
&lt;p&gt;Next let's create a new C# Windows Forms Project&lt;/p&gt;
&lt;p&gt;&lt;img alt="NewProject1" src="http://grbd.github.io/static/code/gtksharp.3.example1/NewProject1.png"&gt;&lt;/p&gt;
&lt;p&gt;We don't need Form1.cs since we're repurposing this project for GtkSharp, so let's remove Form1.cs&lt;/p&gt;
&lt;p&gt;&lt;img alt="RemoveFrom1cs" src="http://grbd.github.io/static/code/gtksharp.3.example1/RemoveFrom1cs.png"&gt;&lt;/p&gt;
&lt;p&gt;Next right click on the project and select &lt;em&gt;Manage NuGet Packages&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let's add the NuGet packages for GtkSharp and GtkSharp.Win32 (if using windows).
Within NuGet the GtkSharp package uses the gtk3 version of gtk. The GtkSharp.Win32 represents the non .net windows binaries we also need.
If your using Linux and already have gtk installed, then the additional binaries shouldn't be needed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="NuGet1" src="http://grbd.github.io/static/code/gtksharp.3.example1/NuGet1.png"&gt;&lt;/p&gt;
&lt;p&gt;Next we want to make sure the project is running as 32bit, the package GtkSharp.Win32 only contains 32bit binaries at the moment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right click on the project&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Properties&lt;/strong&gt; from the drop down menu&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Build&lt;/strong&gt; tab on the left hand side&lt;/li&gt;
&lt;li&gt;Make sure the &lt;strong&gt;Platform Target&lt;/strong&gt; is set to &lt;strong&gt;X86&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="ProjectProperties1" src="http://grbd.github.io/static/code/gtksharp.3.example1/ProjectProperties1.png"&gt;&lt;/p&gt;
&lt;p&gt;The dotnet version will default to &lt;strong&gt;4.5.1&lt;/strong&gt;, you can leave it at that or increase it to a higher version such as 4.5.2, 4.6 or 4.6.1&lt;/p&gt;
&lt;h3&gt;Setting up the Program Class&lt;/h3&gt;
&lt;p&gt;Next we need to alter the code that runs at start-up. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;With Visual Basic you'll need to create a Program.vb file &lt;br&gt;
With C# There should already be a Program.cs file we can use instead&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Within the project properties make sure that the Program class is selected&lt;/li&gt;
&lt;li&gt;If you are using Visual Basic, then you will need to untick the option for &lt;strong&gt;Enable Application Framework&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="ProjectProperties2" src="http://grbd.github.io/static/code/gtksharp.3.example1/ProjectProperties2.png"&gt;&lt;/p&gt;
&lt;p&gt;These are some examples of what the main Program class should look like&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For C#&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ExampleApp1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; A program. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; The main entry point for the application. &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [STAThread]&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;TestForm1&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestForm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;For Visual Basic:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;Gtk&lt;/span&gt;

&lt;span class="k"&gt;Namespace&lt;/span&gt; &lt;span class="nn"&gt;App&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; A program. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="k"&gt;Class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;

        &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Main entry-point for this application. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="k"&gt;Shared&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;TestForm1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestForm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;

    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Class&lt;/span&gt;

&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Namespace&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;TestForm1.glade&lt;/h3&gt;
&lt;p&gt;Next let's create a glade form to use in our project &lt;br&gt;
This is one created from the glade application we've used before.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Drag and drop the file saved from glade into the project&lt;/li&gt;
&lt;li&gt;Make sure to set the &lt;strong&gt;Build Action&lt;/strong&gt; to &lt;strong&gt;Embedded Resource&lt;/strong&gt; for the glade file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="GladeFile1" src="http://grbd.github.io/static/code/gtksharp.3.example1/GladeFile1.png"&gt;&lt;/p&gt;
&lt;p&gt;The next thing to be aware of is that the resource path changes somewhat based on if your using a C# or VB based project&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With VB The resource path is &lt;em&gt;&amp;lt;AssemblyName&amp;gt;.&amp;lt;FileName&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;With C# The resource path is &lt;em&gt;&amp;lt;AssemblyName&amp;gt;.&amp;lt;Directory&amp;gt;.&amp;lt;FileName&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case since it's a C# Project and the file is in the root of the project. &lt;br&gt;
The full resource name is &lt;em&gt;ExampleApp1.TestForm1.glade&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It's also possible to associate the .glade file with the glade.exe by right clicking on it within Visual Studio and selecting &lt;em&gt;Open With&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TestForm1.glade&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Generated with glade 3.19.0 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;interface&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;requires&lt;/span&gt; &lt;span class="na"&gt;lib=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gtk+&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3.14&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GtkWindow&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;window1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;can_focus&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;False&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;child&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GtkFixed&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fixed1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;visible&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;can_focus&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;False&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;child&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GtkButton&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SendButton&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;button&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width_request&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;91&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height_request&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;40&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;visible&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;can_focus&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;receives_default&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;packing&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;11&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;8&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/packing&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/child&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;child&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GtkEntry&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;StdInputTxt&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width_request&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;168&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height_request&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;80&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;visible&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;can_focus&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;packing&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;60&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/packing&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/child&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/child&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;TestForm1.cs&lt;/h3&gt;
&lt;p&gt;The original GTK2 based version of GtkSharp used to include a library called Glade-Sharp which handled the loading in of
forms via Glade.XML, with the newer GTK3 version this is handled via the GTK.Builder class instead.&lt;/p&gt;
&lt;p&gt;With the below example we're going to use the &lt;strong&gt;Builder.Object&lt;/strong&gt; attribute.
This attribute automatically links the named property to the control on the form once it's shown.
Once the property is linked to the form we can then attach to its events or change its properties such as a textbox text value&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TestForm1.cs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For C#&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Gtk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ExampleApp1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Example Test Form for GTKSharp and Glade. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestForm1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cp"&gt;#region Properties&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Used to load in the glade file resource as a window. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;_builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#pragma warning disable 649&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Connects to the SendButton on the Glade Window. &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Builder.Object]&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt; &lt;span class="n"&gt;SendButton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Connects to the InputText Control on the Glade Window. &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Builder.Object]&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt; &lt;span class="n"&gt;StdInputTxt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#pragma warning restore 649&lt;/span&gt;

        &lt;span class="cp"&gt;#endregion&lt;/span&gt;

        &lt;span class="cp"&gt;#region Constructors / Destructors&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Default Shared Constructor. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt; A TestForm1. &amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;TestForm1&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ExampleApp1.TestForm1.glade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TestForm1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;window1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Specialised constructor for use only by derived class. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;builder&amp;quot;&amp;gt; The builder. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;handle&amp;quot;&amp;gt;  The handle. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nf"&gt;TestForm1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Autoconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;SetupHandlers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cp"&gt;#endregion&lt;/span&gt;

        &lt;span class="cp"&gt;#region Handlers&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Sets up the handlers. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetupHandlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;DeleteEvent&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;OnLocalDeleteEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;SendButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Clicked&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;OnSendClick&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Handle Close of Form, Quit Application. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt; Source of the event. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;a&amp;quot;&amp;gt;      Event information to send to registered event handlers. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnLocalDeleteEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DeleteEventArgs&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RetVal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; Handle Click of Button. &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt; Source of the event. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;a&amp;quot;&amp;gt;      Event information to send to registered event handlers. &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnSendClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;StdInputTxt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cp"&gt;#endregion&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;For Visual Basic:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;Gtk&lt;/span&gt;

&lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Example Test Form for GTKSharp and Glade. &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="k"&gt;Class&lt;/span&gt; &lt;span class="nc"&gt;TestForm1&lt;/span&gt;
    &lt;span class="k"&gt;Inherits&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;

&lt;span class="cp"&gt;#Region &amp;quot;Properties&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Used to load in the glade file resource as a window. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Private&lt;/span&gt; &lt;span class="n"&gt;_builder&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Connects to the SendButton on the Glade Window. &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;    &amp;lt;Builder.Object&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Private&lt;/span&gt; &lt;span class="n"&gt;SendButton&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Connects to the InputText Control on the Glade Window. &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;    &amp;lt;Builder.Object&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Private&lt;/span&gt; &lt;span class="n"&gt;StdInputTxt&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;

&lt;span class="cp"&gt;#End Region&lt;/span&gt;

&lt;span class="cp"&gt;#Region &amp;quot;Constructors / Destructors&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Default Shared Constructor. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;returns&amp;gt; A TestForm1. &amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="k"&gt;Shared&lt;/span&gt; &lt;span class="k"&gt;Function&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;TestForm1&lt;/span&gt;
        &lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="k"&gt;New&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Nothing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GtkSharp_BasicForm1_VB.TestForm1.glade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;Nothing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;Return&lt;/span&gt; &lt;span class="k"&gt;New&lt;/span&gt; &lt;span class="n"&gt;TestForm1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;window1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Function&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Specialised constructor for use only by derived class. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;builder&amp;quot;&amp;gt; The builder. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;handle&amp;quot;&amp;gt;  The handle. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Protected&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;MyBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;_builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;
        &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Autoconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;SetupHandlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;

&lt;span class="cp"&gt;#End Region&lt;/span&gt;

&lt;span class="cp"&gt;#Region &amp;quot;Handlers&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Sets up the handlers. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Protected&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;SetupHandlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;AddHandler&lt;/span&gt; &lt;span class="n"&gt;DeleteEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;AddressOf&lt;/span&gt; &lt;span class="n"&gt;OnLocalDeleteEvent&lt;/span&gt;
        &lt;span class="k"&gt;AddHandler&lt;/span&gt; &lt;span class="n"&gt;SendButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Clicked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;AddressOf&lt;/span&gt; &lt;span class="n"&gt;OnSendClick&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Handle Close of Form, Quit Application. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt; Source of the event. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;a&amp;quot;&amp;gt;      Event information to send to registered event handlers. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Protected&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;OnLocalDeleteEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="kt"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;DeleteEventArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RetVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;

    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;summary&amp;gt; Handle Click of Button. &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt; Source of the event. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;#39;&amp;#39;&amp;#39; &amp;lt;param name=&amp;quot;a&amp;quot;&amp;gt;      Event information to send to registered event handlers. &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Protected&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt; &lt;span class="nf"&gt;OnSendClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="kt"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;StdInputTxt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Sub&lt;/span&gt;

&lt;span class="cp"&gt;#End Region&lt;/span&gt;

&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;Class&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Running the Application&lt;/h3&gt;
&lt;p&gt;If we now build and run the project, this should result in a window like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example1" src="http://grbd.github.io/static/code/gtksharp.3.example1/Example1.png"&gt;&lt;/p&gt;
&lt;p&gt;The button just puts &lt;em&gt;Hello World&lt;/em&gt; into the text box&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;a href="http://grbd.github.io/posts/2016/01/29/gtksharp-part-2-setting-up-glade/"&gt;Part 2 - Setting up Glade&lt;/a&gt;&lt;br&gt;
&lt;a href="http://grbd.github.io/posts/2016/06/25/gtksharp-part-4-handles-and-withevents-example/"&gt;Part 4 - Handles and WithEvents Example&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="dotnet"></category><category term="GtkSharp"></category></entry><entry><title>GtkSharp - Part 2 - Setting up Glade</title><link href="http://grbd.github.io/posts/2016/01/29/gtksharp-part-2-setting-up-glade/" rel="alternate"></link><published>2016-01-29T21:00:00+00:00</published><updated>2016-01-29T21:00:00+00:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2016-01-29:/posts/2016/01/29/gtksharp-part-2-setting-up-glade/</id><summary type="html">&lt;p&gt;Getting glade up and running under windows using Msys2 for designing GUI's with drag and drop&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The first step in getting GtkSharp to work is to get glade up and running.
Glade is an application written to design and create GTK forms via drag and drop.
This means we can drag and drop controls onto a form then finally export / save an xml file to be used later by Visual Studio.&lt;/p&gt;
&lt;p&gt;From what I've seen there are two different GUI's available for designing GTK Forms with drag and drop controls
(Similar to WinForms under Visual Studio)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stetic - this is an editor included / embedded into the Monodevelop application, it appears to be limited to GTK2 Applications&lt;/li&gt;
&lt;li&gt;Glade - this is standalone editor which supports both GTK2 and GTK3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Glade there are two main branches&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Version 3.8 - Which is used for GTK2 Forms&lt;/li&gt;
&lt;li&gt;Version 3.19 and above - Which is used for the newer GTK3 Forms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since I'm looking at using GTK3 and Visual Studio instead of Monodevelop, I'm going to use glade here.
It is possible to download a version of glade from the website &lt;a href="https://glade.gnome.org/"&gt;https://glade.gnome.org/&lt;/a&gt;
However, the versions for windows don't appear to be maintained on a regular basis, so seem to be fairly old.
The MSYS2 versions of glade however seem to be fairly up to date, and it's a lot easier than building from source.&lt;/p&gt;
&lt;h2&gt;Installing MSYS2&lt;/h2&gt;
&lt;p&gt;The first step is to make sure we have MSYS2 installed. MSYS2 is a newer replacement for Mingw under windows.
It's just something that makes running Linux applications natively under windows a lot easier.
So install this first&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sourceforge.net/projects/msys2/"&gt;http://sourceforge.net/projects/msys2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sourceforge.net/p/msys2/wiki/MSYS2%20installation/"&gt;http://sourceforge.net/p/msys2/wiki/MSYS2%20installation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the initial install open up a MSYS2 console window.&lt;/p&gt;
&lt;p&gt;&lt;img alt="msys1img" src="http://grbd.github.io/static/code/gtksharp.2.glade/Msys1.png"&gt;&lt;/p&gt;
&lt;p&gt;The first thing we want to do is update the core packages for MSYS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;update-core
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next update any installed packages for MSYS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -Su
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Installing Glade&lt;/h2&gt;
&lt;p&gt;Next we're going to install glade, make sure you have a MSYS console open &lt;/p&gt;
&lt;p&gt;To search for the glade packages&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -Ss glade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To install for 64Bit Windows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S mingw64/mingw-w64-x86_64-glade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To install for 32Bit Windows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S mingw32/mingw-w64-i686-glade
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running Glade&lt;/h2&gt;
&lt;p&gt;We can now run glade via the exe C:\msys64\mingw64\bin\glade.exe&lt;/p&gt;
&lt;p&gt;&lt;img alt="gladeform1img" src="http://grbd.github.io/static/code/gtksharp.2.glade/GladeForm1.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select File -&amp;gt; New&lt;/li&gt;
&lt;li&gt;Drag and drop a Window from the TopLevels section into the viewing area&lt;/li&gt;
&lt;li&gt;Drag and drop a fixed control inside the Window Control&lt;/li&gt;
&lt;li&gt;Drag and drop a button and TextEntry control into the fixed area&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One important thing to note for the current version of GtkSharp pulled from NuGet (3.1.3)
This requires the GTK+ version of the glade file to be set to 3.14&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select File -&amp;gt; Properties&lt;/li&gt;
&lt;li&gt;Under Toolkit version required: change this from 3.16 to 3.14&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point you can save your new glade file to anywhere you want.
Later on we'll be using this with GtkSharp and Visual Studio&lt;/p&gt;
&lt;h2&gt;Copying Across MSYS Files&lt;/h2&gt;
&lt;p&gt;One of the things I noticed when running glade files from .Net is that the application can have problems finding schema and icon files
normally associated with GLib when using for example a FileChooserButton&lt;/p&gt;
&lt;p&gt;There's some more information over at this GitHub link: &lt;a href="https://github.com/openmedicus/gtk-sharp/issues/6"&gt;https://github.com/openmedicus/gtk-sharp/issues/6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The quick fix to this is just to copy and paste some directories from MSYS into ProgamData under windows&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Destination&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C:\msys64\mingw64\share\glib-2.0\schemas&lt;/td&gt;
&lt;td&gt;C:\ProgramData\glib-2.0\schemas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C:\msys64\mingw64\share\icons&lt;/td&gt;
&lt;td&gt;C:\ProgramData\icons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C:\msys64\mingw64\share\themes&lt;/td&gt;
&lt;td&gt;C:\ProgramData\themes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;
&lt;a href="http://grbd.github.io/posts/2016/01/28/gtksharp-part-1-cross-platform-toolkits/"&gt;GtkSharp - Part 1 - Cross Platform Toolkits&lt;/a&gt; &lt;br&gt;
&lt;a href="http://grbd.github.io/posts/2016/06/25/gtksharp-part-3-basic-example-with-vs-and-glade/"&gt;GtkSharp - Part 3 - Basic Example with VS and Glade&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="dotnet"></category><category term="GtkSharp"></category><category term="glade"></category></entry><entry><title>GtkSharp - Part 1 - Cross Platform Toolkits</title><link href="http://grbd.github.io/posts/2016/01/28/gtksharp-part-1-cross-platform-toolkits/" rel="alternate"></link><published>2016-01-28T19:00:00+00:00</published><updated>2016-01-28T19:00:00+00:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2016-01-28:/posts/2016/01/28/gtksharp-part-1-cross-platform-toolkits/</id><summary type="html">&lt;p&gt;Exploring the different GUI toolkits available for .Net across different platforms&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;I decided to have a look into the different toolkit's available for writing .Net code with a GUI that can be used across
multiple platforms. Some of these platforms would include Microsoft Windows 10, Linux and embedded devices such as the Raspberry Pi&lt;/p&gt;
&lt;p&gt;I've posted some example code here for GtkSharp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/grbd/GBD.Blog.Examples"&gt;https://github.com/grbd/GBD.Blog.Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There were four main options I looked into&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WinForms&lt;/li&gt;
&lt;li&gt;QtSharp&lt;/li&gt;
&lt;li&gt;Eto.Forms&lt;/li&gt;
&lt;li&gt;GtkSharp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;WinForms&lt;/h2&gt;
&lt;p&gt;&lt;img alt="winformsimg" src="http://grbd.github.io/static/code/gtksharp.1.toolkits/WinForms1.png"&gt;&lt;/p&gt;
&lt;p&gt;Winforms is traditionally the toolkit used by Microsoft for .Net / with Visual Studio, it dates back to the good old VB6 days.
The Xamarin and mono team have put a lot of work into making sure that that this toolkit can run on both windows and Linux via mono.
However, when you google Winforms and cross compatibility it looks as if the main focus is now on GTK instead as the main alternative.
The one main advantage to Winforms is that it's designable via Visual Studio's inbuilt GUI. Upon googling most of the opinions online, the code base has been largely untouched for a long while on the mono side.&lt;/p&gt;
&lt;h2&gt;QtSharp&lt;/h2&gt;
&lt;p&gt;&lt;img alt="QtFormImage" src="http://grbd.github.io/static/code/gtksharp.1.toolkits/QtForm1.png"&gt;&lt;/p&gt;
&lt;p&gt;Qt for me has the best looking toolkit, also it has QML which is a form of descriptive language for describing the layout of forms similar in some respects to Xaml.
There's been a few different attempts at a .Net binding for Qt, first there was a very old project called QtSharp, then another project
to replace that one called Qyoto which seems to have now been abandoned, and finally the latest incarnation which has re-used the name of QtSharp.&lt;/p&gt;
&lt;p&gt;QtSharp uses the CppSharp library as a way of generating the bindings from the c++ Qt libraries into the .Net space.
At this stage it's still very new and in alpha state, after testing it myself it does appear to actually be able to create and show windows, however there are a couple of gotcha's still.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code is still in Alpha state, which means it may be a while before it's ready for production&lt;/li&gt;
&lt;li&gt;Currently CppSharp doesn't support templated functions (c++ generics) so certain function calls and properties are currently unavailable (such as iterating over the child controls within a form or container)&lt;/li&gt;
&lt;li&gt;QML based apps are going to require some special coding before they can be used from .Net&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm still hopeful this will be useful in the future since I'm quite keen on Qt. Looking at some of the c++ projects online there seems to have been a lot of talk of projects moving from Gtk to Qt due to issues with the newer versions of Gtk and it being largely Gnome focused.
For now, it still needs a lot of work however.&lt;/p&gt;
&lt;p&gt;For some example code to experiment with QtSharp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/grbd/QtSharp.TestApps"&gt;https://github.com/grbd/QtSharp.TestApps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may also want to check out the official repositories
(the gitlab repo is the most up-to-date one)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mono/CppSharp"&gt;https://github.com/mono/CppSharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/ddobrev/QtSharp"&gt;https://gitlab.com/ddobrev/QtSharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ddobrev/QtSharp"&gt;https://github.com/ddobrev/QtSharp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Eto.Forms&lt;/h2&gt;
&lt;p&gt;&lt;img alt="EtoFormsImg" src="http://grbd.github.io/static/code/gtksharp.1.toolkits/EtoForm1.png"&gt;&lt;/p&gt;
&lt;p&gt;Eto.Forms was the next toolkit I looked into.
It's basically a wrapper that sits on top of other toolkits such as windows forms, GtkSharp, WPF, etc.
It's one advantage is that it has the ability to create forms based on Xaml similar to WPF Forms&lt;/p&gt;
&lt;p&gt;There are a couple of downsides though&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The range of controls for containers is still a bit limited&lt;/li&gt;
&lt;li&gt;Currently there's no GUI / drag and drop designer, but there is a window to preview the rendered Xaml&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GtkSharp&lt;/h2&gt;
&lt;p&gt;&lt;img alt="GtkSharpImg" src="http://grbd.github.io/static/code/gtksharp.1.toolkits/GtkSharp1.png"&gt;&lt;/p&gt;
&lt;p&gt;The final toolkit I tried looking into was GtkSharp. This seems to be a lot more mature than the other toolkits in relation to .Net with bug fixes and patches.
There does seem to be a bit of confusion over which version to use and how to set it up.
After a fair bit of digging around online I finally managed to figure out how to get a basic GTK3 based GtkSharp Application up and running
under .Net. Given that some of the documentation is still a bit sparse when it comes to the GTK3 version I figured I'd put some information
up on how to get it going with Visual Studio.&lt;/p&gt;
&lt;p&gt;One advantage to GtkSharp which I'm also interested in is the use of cairo for vector graphics, there's also some unofficial methods of getting it to work with Monogame which is a cross platform 3D library originally based on XNA.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mono-project.com/docs/gui/gtksharp/"&gt;GTK-Sharp&lt;/a&gt; - The Main .Net library for creating GTK based GUI Applications&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.gnome.org/glib/2.46/"&gt;GLIB-Sharp&lt;/a&gt; - Glib Sharp is a library used by GTK for Core Functionality such as memory management&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/GDK"&gt;GDK-Sharp&lt;/a&gt; - Gimp Drawing Kit, this is a low level drawing library used by GTK for graphics rendering&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developer.gnome.org/gio/2.47/"&gt;GIO-Sharp&lt;/a&gt; - The Gio library deals with low level Gnome IO for File system / Network / Process Handling / DBUS / Application Settings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cairo/"&gt;Cairo-Sharp&lt;/a&gt; - Cairo can be used for 2D Vector graphics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mono-project.com/archived/pangobeginners/"&gt;Pango-Sharp&lt;/a&gt; - pango handles all of the font and text related functions for GTK&lt;/li&gt;
&lt;li&gt;ATK-Sharp - atk deals with accessibility&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cairographics.org/OpenGL/"&gt;Open-GL with Cairo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GTK Versions&lt;/h2&gt;
&lt;p&gt;After a bit of digging around online there appears to be two versions of GtkSharp available at the moment.
One for GTK2 and one for GTK3&lt;/p&gt;
&lt;h3&gt;GTK2&lt;/h3&gt;
&lt;p&gt;The one for GTK2 is probably more stable and widely used, but the one I'm interested in here is the GTK3 version.
If you look for the default windows .msi installer on the mono site&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mono-project.com/docs/gui/gtksharp/installer-for-net-framework/"&gt;MSI Instaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mono-project.com/download/#download-win"&gt;Main Download URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is actually the older GTK2 version which installs under "C:\Program Files (x86)\GtkSharp\2.12\" on Windows.
The official GitHub account for GtkSharp seems to mirror this (latest version 2.12.30)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mono/gtk-sharp/"&gt;https://github.com/mono/gtk-sharp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GTK3&lt;/h3&gt;
&lt;p&gt;If you look for the NuGet packages online &lt;a href="https://www.nuget.org/packages?q=gtk-sharp"&gt;NuGet Link&lt;/a&gt;.
As far as I can tell I think these versions are unofficial (although quite useful)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GtkSharp (3.1.3) - GTK3 .Net libraries&lt;/li&gt;
&lt;li&gt;GtkSharp.Win32 - GTK3 C libraries for Windows&lt;/li&gt;
&lt;li&gt;GtkSharp.Linux - GTK3 C libraries for Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the version I'll be using in the following articles.
I suspect although I'm not entirely sure that the source code for this version is based on the below GitHub Link.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/openmedicus/gtk-sharp"&gt;https://github.com/openmedicus/gtk-sharp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
&lt;a href="http://grbd.github.io/posts/2016/01/29/gtksharp-part-2-setting-up-glade/"&gt;Part 2 - Setting up Glade&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="dotnet"></category><category term="GtkSharp"></category><category term="toolkits"></category></entry><entry><title>First Commit</title><link href="http://grbd.github.io/posts/2015/09/28/first-commit/" rel="alternate"></link><published>2015-09-28T13:00:00+01:00</published><updated>2015-09-28T13:00:00+01:00</updated><author><name>Grbd</name></author><id>tag:grbd.github.io,2015-09-28:/posts/2015/09/28/first-commit/</id><summary type="html">&lt;p&gt;Wooo first post&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The beginning is the most important part of the work.&amp;quot;
&lt;small&gt;&lt;cite title="Plato"&gt;Plato&lt;/cite&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well I've finally gotten around to writing a new blog.
I'll be using this to post some of the details of personal projects I'm working on, along with some of the bits of interesting information I've picked up
from different sources.&lt;/p&gt;
&lt;p&gt;I'm currently using pelican to generate the blog and mkdocs for the project sites, since python is one of my favoured languages.
I plan on updating and modifying the theme once I have more time with header and footer images, but for now I'm using one of the default pelican themes.&lt;/p&gt;</content><category term="blogging"></category><category term="pelican"></category></entry></feed>